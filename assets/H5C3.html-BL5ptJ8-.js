import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as a,o as n}from"./app-BIBsZUwS.js";const c="/assets/Snipaste_2022-10-19_22-48-11-DyMKTQuO.png",t="/assets/1658383234143-BffWxrA1.png",l="/assets/1658387121370---jiM2Ny.png",d={};function r(i,e){return n(),s("div",null,e[0]||(e[0]=[a(`<h1 id="html5-css3-基础" tabindex="-1"><a class="header-anchor" href="#html5-css3-基础"><span>HTML5 + CSS3 基础</span></a></h1><h2 id="css3-新特性" tabindex="-1"><a class="header-anchor" href="#css3-新特性"><span>css3 新特性</span></a></h2><h3 id="边框圆角-border-radius-圆角半径" tabindex="-1"><a class="header-anchor" href="#边框圆角-border-radius-圆角半径"><span>边框圆角 <code>border-radius:</code> <em>(圆角半径)</em></span></a></h3><blockquote><p><code>*;</code> <strong>四个角</strong> &gt; <code>* * * *;</code> 左上 右上 右下 左下<br><code>* *;</code> 左上&amp;右下 右上&amp;左下<br><strong>圆角半径达到边长的 50% 则为整圆</strong></p></blockquote><h3 id="阴影" tabindex="-1"><a class="header-anchor" href="#阴影"><span>阴影</span></a></h3><p><code>box-shadow: * * * *;</code> - <code>x 轴偏移</code> - <code>y 轴偏移</code> - <code>模糊半径</code> - <code>颜色</code> <em>(不写则默认为黑色)</em></p><h3 id="形变-transform" tabindex="-1"><a class="header-anchor" href="#形变-transform"><span>形变 <code>transform: *();</code></span></a></h3><ul><li>旋转(角度) <code>rotate(*);</code> 单位:deg <ul><li><code>transform-origin: * *;</code> 旋转中心坐标(x y)</li></ul></li><li>缩放(倍数) <code>scale(*);</code></li><li>位移(x, y) <code>translate(*, *);</code></li></ul><p><strong>多效果叠加</strong>：<code>*() *() *();</code></p><p>平移法<strong>水平垂直居中</strong>：</p><div class="language-css" data-highlighter="shiki" data-ext="css" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">position: absolute;</span></span>
<span class="line"><span style="color:#F286C4;">top: 50%;</span></span>
<span class="line"><span style="color:#F286C4;">left: 50%;</span></span>
<span class="line"><span style="color:#F286C4;">transform: translate(-50%</span><span style="color:#F6F6F4;">,</span><span style="color:#F286C4;"> -50%</span><span style="color:#F6F6F4;">);</span></span></code></pre></div><h3 id="过渡效果-transition" tabindex="-1"><a class="header-anchor" href="#过渡效果-transition"><span>过渡效果 <code>transition</code></span></a></h3><p><code>-property</code> 过渡变化 css 属性(例如<code>transform</code> <code>width</code>)<br><code>-duration</code> 过渡所用时间<br><code>-delay</code> 过渡开始延迟<br><code>-timing-function</code> 过渡函数</p><ul><li><code>ease</code> 开始和结束缓速</li><li><code>linear</code> 匀速</li><li><code>ease-in</code> 开始缓速</li><li><code>ease-out</code> 结束缓速</li><li><code>ease-in-out</code> 开始和结束大幅缓速</li></ul><p><strong>多属性同步改变简写</strong> <code>transition:* * * *, 属性 时间 函数 延迟, ...;</code></p><blockquote><p>写在同一作用域 {...} 内<br> 多属性不能分行，下方会覆盖上方</p></blockquote><h3 id="动画效果-animation" tabindex="-1"><a class="header-anchor" href="#动画效果-animation"><span>动画效果 <code>animation</code></span></a></h3><p>自动显示，完成复杂效果<br> 定义动画：</p><div class="language-css" data-highlighter="shiki" data-ext="css" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">@keyframes</span><span style="color:#FFB86C;font-style:italic;"> name</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  0% {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /* 初始状态 */</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  *% {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /* 未指定100%会按百分比时间先执行后倒退 */</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  100% {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /* 结束状态 */</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#7B7F8B;">  /* 若只有开始和结束状态可简写为： */</span></span>
<span class="line"><span style="color:#F6F6F4;">  from {</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  to {</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><blockquote><p>开始和结束状态相同可使动画平滑</p></blockquote><p><code>animation:* * * * *;</code> <em>name 时间 函数 延迟 次数</em><br><code>-name</code> 绑定的动画名称<br><code>-duration</code> 动画所用时间<br><code>-timing-function</code> 动画速度函数<br><code>-delay</code> 动画开始延迟<br><code>-iteration-count</code> 播放次数</p><ul><li><code>infinite</code> 循环</li></ul><p><code>-play-state: *;</code> 播放状态</p><ul><li><code>pause</code> 暂停</li></ul><p>(<em>css3 新特性</em>)</p><h2 id="flex-布局-弹性-弹性盒子布局" tabindex="-1"><a class="header-anchor" href="#flex-布局-弹性-弹性盒子布局"><span>flex 布局 (<em>弹性/弹性盒子布局</em>)</span></a></h2><p><code>display: flex;</code> 元素变为 flex 容器；内部元素变为 flex-item</p><blockquote><p>main axis： 主轴<br> cross axis： 交叉轴<br><em>默认(沿主轴）横向排列，占 100%列高，不会超出容器(等比例缩放)</em></p></blockquote><figure><img src="`+c+`" alt="1658317522152" tabindex="0" loading="lazy"><figcaption>1658317522152</figcaption></figure><h3 id="设置-flex-容器" tabindex="-1"><a class="header-anchor" href="#设置-flex-容器"><span>设置 flex 容器</span></a></h3><p><code>flex-direction: *;</code> 设置 flex-item 的排列方向</p><ul><li><code>row</code> <strong>水平排列</strong>(<em>默认</em>)</li><li><code>column</code> <strong>垂直排列</strong></li><li><code>row-reverse</code> 反向水平排列</li><li><code>column-reverse</code> 反向垂直排列</li></ul><p><code>justify-content: *;</code> <strong>flex-item 在主轴的对齐方式</strong></p><ul><li><code>flex-start</code> 左对齐(<em>默认</em>)</li><li><code>flex-end</code> 右对齐</li><li><code>center</code> 居中对齐</li><li><code>space-between</code> 两端对齐(<em>各项目之间间隔相等，与两侧无</em>)</li><li><code>space-around</code> 各项目两侧间隔相等(<em>因此项目之间的间隔比项目与边框的间隔大一倍</em>)</li></ul><p><code>align-items: *;</code> flex-item 在<strong>交叉轴</strong>的对齐方式</p><ul><li><code>flex-start</code> 不延伸；靠上</li><li><code>flex-end</code> 不延伸；靠下</li><li><code>center</code> 不延伸；居中</li><li><code>stretch</code> 延伸(<em>默认</em>)：项目高度未设置或设为 auto 则占满整个容器的高度</li></ul><p><code>flex-wrap: nowrap | wrap | wrap-reverse;</code> 换行</p><blockquote><p>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。</p></blockquote><h3 id="设置-flex-项目-flex-item" tabindex="-1"><a class="header-anchor" href="#设置-flex-项目-flex-item"><span>设置 flex 项目（flex-item）</span></a></h3><p><code>flex-grow:</code> <strong>该项目填充的放大倍率</strong>(<em>默认为 0</em>)<br><code>flex-shrink:</code> <strong>空间不足时该项目缩小倍率</strong>(<em>默认为 1，值越大缩得越小；为 0 时该项目不缩小</em>)<br><code>flex-basis:</code> <strong>主轴排列宽度/交叉轴排列高度(固定/最小)</strong>(<em>默认为<code>auto</code>；有具体单位如 px</em>)</p><blockquote><p>它可以设为跟 width/height 属性一样的值（比如 350px），则项目将占据固定空间。</p></blockquote><p>简写 <code>flex: * * *;</code> -grow -shrink -basis</p><blockquote><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p></blockquote><p><code>align-self: *;</code> 单个 flex-item 交叉轴的对齐方式</p><table><thead><tr><th>auto</th><th>flex-start</th><th>flex-end</th><th>center</th><th>baseline</th><th>stretch</th></tr></thead><tbody><tr><td>自动</td><td>靠上</td><td>靠下</td><td>居中</td><td>基线对齐</td><td>延伸</td></tr></tbody></table><h3 id="flex-水平垂直居中" tabindex="-1"><a class="header-anchor" href="#flex-水平垂直居中"><span>flex 水平垂直居中</span></a></h3><div class="language-css" data-highlighter="shiki" data-ext="css" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">display: flex;</span></span>
<span class="line"><span style="color:#F286C4;">justify-content: center;</span></span>
<span class="line"><span style="color:#F286C4;">align-items: center;</span><span style="color:#7B7F8B;"> /* 容器内 */</span></span>
<span class="line"><span style="color:#F286C4;">align-self: center;</span><span style="color:#7B7F8B;"> /* 单个元素 */</span></span></code></pre></div><p>(<em>css3 新特性</em>)</p><h2 id="grid-布局-display-grid" tabindex="-1"><a class="header-anchor" href="#grid-布局-display-grid"><span>grid 布局 <code>display: grid;</code></span></a></h2><p>同时布局行和列(<em>单元格</em>)；格内元素默认横向排列</p><h3 id="容器内单元格设置" tabindex="-1"><a class="header-anchor" href="#容器内单元格设置"><span>容器内单元格设置</span></a></h3><p><code>grid-template-columns: * * ...;</code> 列宽度<br><code>grid-template-raws: * * * ...;</code> 行高度<br><code>grid-auto-rows:</code> 溢出行高度<br><code>grid-auto-columns:</code> 溢出列宽度</p><blockquote><p><em>可以直接设置像素；也可以设置填充占比，单位为 <code>fr</code></em></p></blockquote><p><code>justify-content: *;</code> 单元格在容器内水平对齐方式<br><code>align-content: *;</code> 单元格在容器内垂直对齐方式</p><h3 id="格内元素设置" tabindex="-1"><a class="header-anchor" href="#格内元素设置"><span>格内元素设置</span></a></h3><p><code>grid-auto-flow: column;</code> 单元格内元素纵向排列</p><p><code>justify-items: *;</code> 单元格<strong>内</strong>元素水平对齐方式</p><ul><li><code>start</code> 不延伸；靠左</li><li><code>end</code> 不延伸；靠右</li><li><code>center</code> 不延伸；居中</li><li><code>stretch</code> 水平延伸(<em>默认</em>)</li></ul><p><code>align-items: *;</code> 单元格<strong>内</strong>元素垂直对齐方式</p><ul><li><code>start</code> 不延伸；靠上</li><li><code>end</code> 不延伸；靠下</li><li><code>center</code> 不延伸；居中</li><li><code>stretch</code> 垂直延伸(<em>默认</em>)</li></ul><p><code>justify-self: *;</code> 单个格内元素水平对齐方式<br><code>align-self: *;</code> 单个格内元素垂直对齐方式</p><h3 id="合并单元格-格内元素占格数设置" tabindex="-1"><a class="header-anchor" href="#合并单元格-格内元素占格数设置"><span>合并单元格 (<em>格内元素占格数设置</em>)</span></a></h3><figure><img src="`+t+`" alt="1658383234143" tabindex="0" loading="lazy"><figcaption>1658383234143</figcaption></figure><table><thead><tr><th>合并方式</th><th>元素开始<strong>边</strong></th><th>元素结束<strong>边</strong></th><th>简写</th></tr></thead><tbody><tr><td><strong>横向占格</strong></td><td><code>grid-column-start:</code></td><td><code>grid-column-end:</code></td><td><code>grid-column: * / *;</code></td></tr><tr><td><strong>纵向占格</strong></td><td><code>grid-row-start</code></td><td><code>grid-row-end</code></td><td><code>grid-row: * / *;</code></td></tr></tbody></table><blockquote><p><em>通过调整开始和结束边也可实现排列变化，如 <code>grid-column: 2 / 4;</code></em></p></blockquote><p>(<em>css3 新特性</em>)</p><h2 id="响应式布局" tabindex="-1"><a class="header-anchor" href="#响应式布局"><span>响应式布局</span></a></h2><h3 id="媒体查询-media" tabindex="-1"><a class="header-anchor" href="#媒体查询-media"><span>媒体查询 <code>@media *</code></span></a></h3><p>浏览器窗口符合一定条件实现某些样式</p><div class="language-css" data-highlighter="shiki" data-ext="css" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">@media</span><span style="color:#BF9EEE;"> screen</span><span style="color:#F286C4;"> and</span><span style="color:#F6F6F4;"> (*</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> *) </span><span style="color:#F286C4;">and</span><span style="color:#F6F6F4;"> (*</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> *) ... {</span></span>
<span class="line"><span style="color:#F286C4;">  selector</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><blockquote><p>利弊<br> 优点：一套页面适应多端设备，提升开发效率<br> 缺点：页面效果不如单独为一终端定制的页面；性能问题；维护成本高<br> 总结：大部分项目不会整体采用响应式</p></blockquote><h2 id="移动端单位" tabindex="-1"><a class="header-anchor" href="#移动端单位"><span>移动端单位</span></a></h2><ul><li><p>绝对单位</p><ul><li>px: 像素</li></ul></li><li><p>相对单位</p><ul><li>em: 父级元素<code>font-size:</code>值的倍数(<em>如父级没有则向上搜索</em>)</li><li>rem: <code>&lt;html&gt;</code>标签<code>font-size:</code>值的倍数；</li><li>vw: 相对于视口*宽度的 1%</li><li>vh: 相对于视口*高度的 1%</li><li>*百分比法(<em>过于繁琐</em>)</li></ul></li></ul><blockquote><p>用 js 设置<br> 设计稿像素除以基数</p></blockquote><figure><img src="`+l+'" alt="1658387121370" tabindex="0" loading="lazy"><figcaption>1658387121370</figcaption></figure>',75)]))}const m=o(d,[["render",r]]),g=JSON.parse(`{"path":"/docs/learning/frontend/H5C3.html","title":"HTML5 + CSS3 基础","lang":"zh-CN","frontmatter":{"description":"HTML5 + CSS3 基础 css3 新特性 边框圆角 border-radius: (圆角半径) *; 四个角 > * * * *; 左上 右上 右下 左下 * *; 左上&右下 右上&左下 圆角半径达到边长的 50% 则为整圆 阴影 box-shadow: * * * *; - x 轴偏移 - y 轴偏移 - 模糊半径 - 颜色 (不写则默认为...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTML5 + CSS3 基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoSheBRO\\"}]}"],["meta",{"property":"og:url","content":"https://XiaoSheBRO.github.io/docs/learning/frontend/H5C3.html"}],["meta",{"property":"og:site_name","content":"Shaw's Book"}],["meta",{"property":"og:title","content":"HTML5 + CSS3 基础"}],["meta",{"property":"og:description","content":"HTML5 + CSS3 基础 css3 新特性 边框圆角 border-radius: (圆角半径) *; 四个角 > * * * *; 左上 右上 右下 左下 * *; 左上&右下 右上&左下 圆角半径达到边长的 50% 则为整圆 阴影 box-shadow: * * * *; - x 轴偏移 - y 轴偏移 - 模糊半径 - 颜色 (不写则默认为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":7.23,"words":1446},"filePathRelative":"docs/learning/frontend/H5C3.md","autoDesc":true,"excerpt":"\\n<h2>css3 新特性</h2>\\n<h3>边框圆角 <code>border-radius:</code> <em>(圆角半径)</em></h3>\\n<blockquote>\\n<p><code>*;</code> <strong>四个角</strong> &gt; <code>* * * *;</code> 左上 右上 右下 左下<br>\\n<code>* *;</code> 左上&amp;右下 右上&amp;左下<br>\\n<strong>圆角半径达到边长的 50% 则为整圆</strong></p>\\n</blockquote>\\n<h3>阴影</h3>\\n<p><code>box-shadow: * * * *;</code> - <code>x 轴偏移</code> - <code>y 轴偏移</code> - <code>模糊半径</code> - <code>颜色</code> <em>(不写则默认为黑色)</em></p>"}`);export{m as comp,g as data};
