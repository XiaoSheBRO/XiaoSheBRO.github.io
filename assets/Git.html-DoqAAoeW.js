import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as t,b as r,d as l,r as d,o as E,a as s,e}from"./app-Bfbog915.js";const h={};function y(g,a){const c=d("CodeTabs");return E(),i("div",null,[a[8]||(a[8]=t('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h1><blockquote><p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener noreferrer">https://learngitbranching.js.org/</a></p></blockquote><h2 id="提交-commit" tabindex="-1"><a class="header-anchor" href="#提交-commit"><span>提交 <code>commit</code></span></a></h2><h3 id="提交规范" tabindex="-1"><a class="header-anchor" href="#提交规范"><span>提交规范</span></a></h3><ul><li><code>feat</code> 增加新功能</li><li><code>fix</code> 修复问题/BUG</li><li><code>style</code> 代码风格相关无影响运行结果的</li><li><code>perf</code> 优化/性能提升</li><li><code>refactor</code> 重构</li><li><code>revert</code> 撤销修改</li><li><code>test</code> 测试相关</li><li><code>docs</code> 文档/注释</li><li><code>chore</code> 依赖更新/脚手架配置修改等</li><li><code>workflow</code> 工作流改进</li><li><code>ci</code> 持续集成</li><li><code>types</code> 类型修改</li></ul><p>示例：<code>git commit -m &quot;feat: xxx&quot;</code></p><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支"><span>分支</span></a></h2>',7)),r(c,{id:"82",data:[{id:"branch"},{id:"checkout"},{id:"switch"},{id:"merge"}]},{title0:l(({value:o,isActive:n})=>a[0]||(a[0]=[e("branch")])),title1:l(({value:o,isActive:n})=>a[1]||(a[1]=[e("checkout")])),title2:l(({value:o,isActive:n})=>a[2]||(a[2]=[e("switch")])),title3:l(({value:o,isActive:n})=>a[3]||(a[3]=[e("merge")])),tab0:l(({value:o,isActive:n})=>a[4]||(a[4]=[s("div",{class:"language-bash","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"background-color":"#282A36",color:"#f6f6f4"}},[s("pre",{class:"shiki dracula-soft vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," branch"),s("span",{style:{color:"#7B7F8B"}}," # 列出本地分支")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," branch"),s("span",{style:{color:"#E7EE98"}}," branch-name"),s("span",{style:{color:"#7B7F8B"}},"  # 创建 branch-name 新分支")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," branch"),s("span",{style:{color:"#BF9EEE"}}," -d"),s("span",{style:{color:"#E7EE98"}}," branch-name"),s("span",{style:{color:"#7B7F8B"}}," # 删除 branch-name 分支")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," branch"),s("span",{style:{color:"#BF9EEE"}}," -m"),s("span",{style:{color:"#E7EE98"}}," old-branch-name"),s("span",{style:{color:"#E7EE98"}}," new-branch-name"),s("span",{style:{color:"#7B7F8B"}}," # 重命名分支")])])])],-1)])),tab1:l(({value:o,isActive:n})=>a[5]||(a[5]=[s("div",{class:"language-bash","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"background-color":"#282A36",color:"#f6f6f4"}},[s("pre",{class:"shiki dracula-soft vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," checkout"),s("span",{style:{color:"#E7EE98"}}," branch-name"),s("span",{style:{color:"#7B7F8B"}}," # 查看(切换到) branch-name 分支")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," checkout"),s("span",{style:{color:"#BF9EEE"}}," -b"),s("span",{style:{color:"#E7EE98"}}," new-branch-name"),s("span",{style:{color:"#7B7F8B"}}," # 从当前分支创建并切换到新分支")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," checkout"),s("span",{style:{color:"#BF9EEE"}}," -b"),s("span",{style:{color:"#E7EE98"}}," new-branch-name"),s("span",{style:{color:"#E7EE98"}}," old-branch-name"),s("span",{style:{color:"#7B7F8B"}}," # 从模板分支创建并切换到新分支")])])])],-1)])),tab2:l(({value:o,isActive:n})=>a[6]||(a[6]=[s("div",{class:"language-bash","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"background-color":"#282A36",color:"#f6f6f4"}},[s("pre",{class:"shiki dracula-soft vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," switch"),s("span",{style:{color:"#E7EE98"}}," branch-name"),s("span",{style:{color:"#7B7F8B"}}," # 查看(切换到) branch-name 分支")]),e(`
`),s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," switch"),s("span",{style:{color:"#BF9EEE"}}," -c"),s("span",{style:{color:"#E7EE98"}}," new-branch-name"),s("span",{style:{color:"#7B7F8B"}}," # 从当前分支创建并切换到新分支")])])])],-1)])),tab3:l(({value:o,isActive:n})=>a[7]||(a[7]=[s("div",{class:"language-bash","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"background-color":"#282A36",color:"#f6f6f4"}},[s("pre",{class:"shiki dracula-soft vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#62E884"}},"git"),s("span",{style:{color:"#E7EE98"}}," merge"),s("span",{style:{color:"#E7EE98"}}," branch-name"),s("span",{style:{color:"#7B7F8B"}}," # 将当前分支与 branch-name 分支合并")])])])],-1)])),_:1}),a[9]||(a[9]=t(`<h2 id="变基-rebase" tabindex="-1"><a class="header-anchor" href="#变基-rebase"><span>变基 <code>rebase</code></span></a></h2><p>将一个分支的新提交复制到另一个分支的末端(最后)，用于创造更加清晰的线性提交记录。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;"># 将 hotfix 分支变基到 main 分支并更新 main</span></span>
<span class="line"><span style="color:#62E884;">hotfix</span><span style="color:#F286C4;"> &gt;</span><span style="color:#E7EE98;"> git</span><span style="color:#E7EE98;"> rebase</span><span style="color:#E7EE98;"> main</span></span>
<span class="line"><span style="color:#62E884;">hotfix</span><span style="color:#F286C4;"> &gt;</span><span style="color:#E7EE98;"> git</span><span style="color:#E7EE98;"> switch</span><span style="color:#E7EE98;"> main</span></span>
<span class="line"><span style="color:#62E884;">main</span><span style="color:#F286C4;"> &gt;</span><span style="color:#E7EE98;"> git</span><span style="color:#E7EE98;"> rebase</span><span style="color:#E7EE98;"> hotfix</span></span></code></pre></div><h2 id="head" tabindex="-1"><a class="header-anchor" href="#head"><span><code>HEAD</code></span></a></h2><ul><li>位于<code>.git/HEAD</code><ul><li>存储了当前分支中的某一个提交记录的引用</li></ul></li><li>通常可以把 HEAD 看做你的上一次提交的快照。</li><li>默认指向当前分支上最近一次提交记录。 <ul><li>随着提交向前移动。</li></ul></li><li>HEAD 通常情况下是指向分支名，再指向最近一次提交记录</li></ul><p>当 <code>git checkout commit1</code>，此时 HEAD 直接指向 commit1，称为分离的 HEAD (<em>Detached Head</em>)。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> show</span><span style="color:#E7EE98;"> HEAD</span><span style="color:#7B7F8B;"> # 检查 Head 的状态</span></span></code></pre></div><blockquote><p>大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p></blockquote><h2 id="相对引用" tabindex="-1"><a class="header-anchor" href="#相对引用"><span>相对引用 <code>^</code> <code>~</code></span></a></h2><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> checkout</span><span style="color:#E7EE98;"> main^</span><span style="color:#7B7F8B;"> # main 分支的上一个节点</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> checkout</span><span style="color:#E7EE98;"> main^^</span><span style="color:#7B7F8B;"> # main 分支的上两个节点</span></span>
<span class="line"><span style="color:#7B7F8B;">## commit1 的上一个节点</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> checkout</span><span style="color:#E7EE98;"> commit1</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> checkout</span><span style="color:#E7EE98;"> HEAD^</span></span></code></pre></div><p><code>~</code> 是用来在当前提交路径上回溯的修饰符<br> HEAD~n 表示当前所在的提交路径上的前 n 个提交<br> HEAD = HEAD~0<br> HEAD~ = HEAD~1<br> HEAD~~ = HEAD~2</p><p><mark>注意：<code>HEAD^^^</code> 并不等价于 <code>HEAD^3</code>，而是等价与 <code>HEAD^1^1^1</code></mark></p><h3 id="两者关系" tabindex="-1"><a class="header-anchor" href="#两者关系"><span>两者关系</span></a></h3><p>~ 获取第一个祖先提交，^ 可以获取第一个父提交。 其实第一个祖先提交就是第一个父提交，反之亦然。 因此，当 n 为 1 时，~ 和 ^ 其实是等价的。 譬如：HEAD~~~ 和 HEAD^^^ 是等价的。</p><h4 id="强制移动分支" tabindex="-1"><a class="header-anchor" href="#强制移动分支"><span>强制移动分支</span></a></h4><p><code>git branch -f main HEAD~3</code> 将 main 分支强制指向 HEAD 的第 3 级 parent 提交。</p><h2 id="撤销变更" tabindex="-1"><a class="header-anchor" href="#撤销变更"><span>撤销变更</span></a></h2><p>撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。</p><ul><li><code>git reset</code> 分支记录回退<mark>到</mark>第几个提交记录来实现撤销改动，仅在本地分支有效 <ul><li>C2 所做的变更还在，但是处于未加入暂存区状态。</li></ul></li><li><code>git revert</code> 创建一个新的提交记录，通过删除<mark>某个</mark>提交的变更来回退改动，可用来推送到远程分支。</li></ul><h2 id="移动提交" tabindex="-1"><a class="header-anchor" href="#移动提交"><span>移动提交</span></a></h2><p><code>git cherry-pick commitX commitY ...</code> 复制所需要的分支到当前分支下</p><h2 id="子模块-submodule" tabindex="-1"><a class="header-anchor" href="#子模块-submodule"><span>子模块 <code>submodule</code></span></a></h2><p>git 子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> submodule</span><span style="color:#E7EE98;"> add</span><span style="color:#E7EE98;"> http://repo-name.git</span><span style="color:#E7EE98;"> repo-name</span><span style="color:#7B7F8B;"> # 将 repo-name 仓库作为子模块放置在 /repo-name 文件夹下</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> submodule</span><span style="color:#E7EE98;"> update</span><span style="color:#7B7F8B;"> # 更新项目内子模块到最新版本</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> submodule</span><span style="color:#E7EE98;"> update</span><span style="color:#BF9EEE;"> --remote</span><span style="color:#7B7F8B;"> # 更新子模块为远程项目的最新版本</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> submodule</span><span style="color:#E7EE98;"> update</span><span style="color:#BF9EEE;"> --init</span><span style="color:#BF9EEE;"> --recursive</span><span style="color:#7B7F8B;"> # 递归s初始化并下载子模块仓库</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> rm</span><span style="color:#BF9EEE;"> --cached</span><span style="color:#E7EE98;"> repo-name</span><span style="color:#7B7F8B;"> # 删除子模块</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> clone</span><span style="color:#E7EE98;"> http://main-repo.git</span><span style="color:#BF9EEE;"> --recursive</span><span style="color:#7B7F8B;"> # 克隆主仓库和子模块</span></span></code></pre></div><h2 id="设置-config" tabindex="-1"><a class="header-anchor" href="#设置-config"><span>设置 <code>config</code></span></a></h2><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;"># 设置用户信息</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> config</span><span style="color:#F6F6F4;"> (--global) user.name </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">用户名</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> config</span><span style="color:#F6F6F4;"> (--global) user.email </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">邮箱</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#7B7F8B;"># 设置代理：</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> config</span><span style="color:#F6F6F4;"> (--global) http.proxy http://127.0.0.1:1080</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> config</span><span style="color:#F6F6F4;"> (--global) http.proxy </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">socks5://127.0.0.1:1080</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> config</span><span style="color:#F6F6F4;"> (--global) https.proxy https://127.0.0.1:1080</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> config</span><span style="color:#F6F6F4;"> (--global) https.proxy </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">socks5://127.0.0.1:1080</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;"># 取消代理：</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> config</span><span style="color:#F6F6F4;"> (--global) --unset http.proxy</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#E7EE98;"> config</span><span style="color:#F6F6F4;"> (--global) --unset https.proxy</span></span></code></pre></div><h2 id="其他常用命令" tabindex="-1"><a class="header-anchor" href="#其他常用命令"><span>其他常用命令</span></a></h2><ul><li><p><code>git status</code> 仓库状态信息</p></li><li><p><code>git add 文件名</code> 暂存单个文件 <code>.</code> 全部文件</p></li><li><p><code>git reset 文件名</code> 取消暂存</p></li><li><p><code>git reset commitID</code> 回退版本</p><ul><li><code>--hard</code> 不保留当前所有变更</li><li><code>--soft</code> 保留为(<em>staged</em>)暂存</li><li><code>--mixed</code> 保留为(<em>Modified</em>)修改</li></ul></li><li><p><code>git log</code> 提交日志</p></li><li><p><code>git reflog</code> 所有操作记录</p></li><li><p><code>git fetch</code> 拉取远程分支</p></li><li><p><code>git pull</code> 自动 fetch + merge</p></li><li><p><code>git branch -u origin/分支名</code> 设置远程分支(简写)</p></li><li><p><code>git push --set-upstream origin 分支名</code> 设置远程分支并推送</p></li></ul>`,28))])}const m=p(h,[["render",y],["__file","Git.html.vue"]]),f=JSON.parse(`{"path":"/docs/learning/tools/Git.html","title":"Git","lang":"zh-CN","frontmatter":{"description":"Git https://learngitbranching.js.org/ 提交 commit 提交规范 feat 增加新功能 fix 修复问题/BUG style 代码风格相关无影响运行结果的 perf 优化/性能提升 refactor 重构 revert 撤销修改 test 测试相关 docs 文档/注释 chore 依赖更新/脚手架配置修改等 w...","head":[["meta",{"property":"og:url","content":"https://XiaoSheBRO.github.io/docs/learning/tools/Git.html"}],["meta",{"property":"og:site_name","content":"Shaw's Book"}],["meta",{"property":"og:title","content":"Git"}],["meta",{"property":"og:description","content":"Git https://learngitbranching.js.org/ 提交 commit 提交规范 feat 增加新功能 fix 修复问题/BUG style 代码风格相关无影响运行结果的 perf 优化/性能提升 refactor 重构 revert 撤销修改 test 测试相关 docs 文档/注释 chore 依赖更新/脚手架配置修改等 w..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoSheBRO\\"}]}"]]},"headers":[{"level":2,"title":"提交 commit","slug":"提交-commit","link":"#提交-commit","children":[{"level":3,"title":"提交规范","slug":"提交规范","link":"#提交规范","children":[]}]},{"level":2,"title":"分支","slug":"分支","link":"#分支","children":[]},{"level":2,"title":"变基 rebase","slug":"变基-rebase","link":"#变基-rebase","children":[]},{"level":2,"title":"HEAD","slug":"head","link":"#head","children":[]},{"level":2,"title":"相对引用 ^ ~","slug":"相对引用","link":"#相对引用","children":[{"level":3,"title":"两者关系","slug":"两者关系","link":"#两者关系","children":[]}]},{"level":2,"title":"撤销变更","slug":"撤销变更","link":"#撤销变更","children":[]},{"level":2,"title":"移动提交","slug":"移动提交","link":"#移动提交","children":[]},{"level":2,"title":"子模块 submodule","slug":"子模块-submodule","link":"#子模块-submodule","children":[]},{"level":2,"title":"设置 config","slug":"设置-config","link":"#设置-config","children":[]},{"level":2,"title":"其他常用命令","slug":"其他常用命令","link":"#其他常用命令","children":[]}],"git":{},"readingTime":{"minutes":6.01,"words":1202},"filePathRelative":"docs/learning/tools/Git.md","autoDesc":true,"excerpt":"\\n<blockquote>\\n<p><a href=\\"https://learngitbranching.js.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://learngitbranching.js.org/</a></p>\\n</blockquote>\\n<h2>提交 <code>commit</code></h2>\\n<h3>提交规范</h3>\\n<ul>\\n<li><code>feat</code> 增加新功能</li>\\n<li><code>fix</code> 修复问题/BUG</li>\\n<li><code>style</code> 代码风格相关无影响运行结果的</li>\\n<li><code>perf</code> 优化/性能提升</li>\\n<li><code>refactor</code> 重构</li>\\n<li><code>revert</code> 撤销修改</li>\\n<li><code>test</code> 测试相关</li>\\n<li><code>docs</code> 文档/注释</li>\\n<li><code>chore</code> 依赖更新/脚手架配置修改等</li>\\n<li><code>workflow</code> 工作流改进</li>\\n<li><code>ci</code> 持续集成</li>\\n<li><code>types</code> 类型修改</li>\\n</ul>"}`);export{m as comp,f as data};
