import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,b as o,f as n,a as c,r as t,o as r}from"./app-Bw-jT3D9.js";const F={},y={class:"hint-container details"};function i(d,s){const l=t("Mermaid");return r(),e("div",null,[s[1]||(s[1]=a(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h1><h2 id="起源" tabindex="-1"><a class="header-anchor" href="#起源"><span>起源</span></a></h2><p>网景公司（<em>Netscape Communication Corporation</em>）于 1994 年推出了第一款商用浏览器：网景（<em>Netscape Navigator</em>）。<br> 1995 年，网景公司决定在浏览器中加入一门编程语言，用于实现用户交互效果，提高用户体验。<br> 网景公司聘请 <strong>Brendan Eich</strong> 开发这门语言。10 天后， LiveScript 语言诞生。后来为了商业考虑，更名为 JavaScript（<em>JS</em>）。</p><blockquote><p>Java 与 JavaScript 的关系：周杰 ~ 周杰伦；葡萄 ~ 葡萄牙。</p></blockquote><h3 id="第一次浏览器大战" tabindex="-1"><a class="header-anchor" href="#第一次浏览器大战"><span>第一次浏览器大战</span></a></h3><p>网景公司计划在浏览器中加入网络操作系统，触动了微软的利益；<br> 1995 年微软发布 IE 浏览器，第一次浏览器大战开启。<br> JS 推出之后，网景取得了极大的竞争优质。<br> 微软对 JS 进行反编译，并借鉴 JS 推出了 JScript、VBScript 两种语言，这两种语言都可以在 IE 中执行。</p><p>第一次浏览器大战是<strong>标准之争</strong>。</p><p>1997 年，网景将 JavaScript 1.1 版本提交给 ECMA (<em>欧洲计算机制造协会</em>)，希望将其标准化。<br> ECMA 收录了 JavaScript 并提交给 ISO；经修改成为第一个JavaScript 标准，称为 <strong>ECMAScript</strong>，简称 ES。</p><p>IE3 发布，并绑定 Windows 操作系统，网景市场份额不断下滑，于 1998 破产被收购。</p><h3 id="第二次浏览器大战" tabindex="-1"><a class="header-anchor" href="#第二次浏览器大战"><span>第二次浏览器大战</span></a></h3><p>微软推出 IE4、IE5、IE6（捆绑 Windows XP）后，微软决定解散浏览器团队。<br> Brendan Eich 在网景解散后，带领团队成立 Mozilla 基金会，并将网景浏览器和 JS 开源。<br> 长时间内世界技术爱好者们对网景浏览器进行维护和修补。<br> 2002 年 Mozilla 基金会推出 Firefox 浏览器。<br> 2008 年 Google 推出 Chrome 浏览器；2010 年 Apple 推出 Safari 浏览器；2012 年 ASA 推出 Opera 浏览器。<br> Chrome 浏览器搭载了 JS 引擎 V8，可以将 JS 代码直接转换为字节码；JS 代码的执行速度大幅提升，理论上已经接近汇编语言。从此 JS 具备了编写大型应用的能力，甚至服务器应用。<strong>V8 引擎将 JS 的执行推向了一个新的台阶</strong>。</p><blockquote><p>Ryan Dahl 直接利用 V8 引擎完成了 node.js，使 JS 语言在服务器端可以运行。</p></blockquote><h3 id="es-标准的发展" tabindex="-1"><a class="header-anchor" href="#es-标准的发展"><span>ES 标准的发展</span></a></h3><p>1997年 -- ES1<br> 1998年 -- ES2<br> 1999年 -- ES3<br> 2009年 -- ES5，从此习惯上不再区分 JavaScrip 和 ECMAScript<br> 2015年 -- ES6 / ES2015，从 ES6 开始，使用年号作为版本号<br> 2016年 -- ES2016<br> ……</p><p><mark>ES 的语言标准不涉及语言的运行环境</mark>；正是因为 ES 避免了运行环境，让 ES 有机会在各种环境中运行，使 ES 成为了一个通用编程语言。</p><p>通常把 ES 运行的环境称为<strong>宿主环境</strong></p><h2 id="语言特性" tabindex="-1"><a class="header-anchor" href="#语言特性"><span>语言特性</span></a></h2><ol><li>JavaScript 是一种解释型语言</li><li>JavaScript 是一个弱类型语言</li><li>单线程：上一件事情没有做完，下一件事情必须等待（<em>同步现象</em>）</li><li>异步：提高单线程的执行效率</li></ol><details class="hint-container details"><summary>📚 编程语言分类</summary><p>编译型语言：编译型语言会经过一个翻译的过程，负责编译的叫做编译器；翻译的结果叫做编译结果。</p><blockquote><p>如 C、C++ 等<br> 优点：执行速度快<br> 缺点：某个编译结果难以适用于各种环境（<em>跨平台障碍</em>）、部署繁琐</p></blockquote><p>解释型语言：没有编译结果。</p><blockquote><p>如 JavaScript、Php 等<br> 优点：跨平台、部署简单<br> 缺点：执行速度稍慢</p></blockquote><p>强类型语言：存放的数据类型不可变。</p><blockquote><p>优点：严谨<br> 缺点：灵活性差、不易上手</p></blockquote><p>弱类型语言：存放的数据类型可变。</p><blockquote><p>优点：灵活、易上手<br> 缺点：不严谨</p></blockquote><p>通常将弱类型的解释型语言称为脚本语言。</p></details><h3 id="浏览器环境中-javascript-代码的书写位置" tabindex="-1"><a class="header-anchor" href="#浏览器环境中-javascript-代码的书写位置"><span>浏览器环境中 JavaScript 代码的书写位置</span></a></h3><ol><li>直接书写在页面中的 <code>&lt;script&gt;</code> 元素中</li><li>写到外部 js 文件中，通过 <code>&lt;script&gt;</code> 元素的 <code>src</code> 属性引入 <ul><li>有利于浏览器缓存</li><li>有利于代码分离（<em>内容，样式，功能三者分离</em>），便于维护和阅读</li></ul></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>页面中可以存在多个 <code>&lt;script&gt;</code> 元素，执行顺序从上到下。</li><li>如果一个 <code>&lt;script&gt;</code> 元素使用 <code>src</code> 引入了外部代码，其内部书写的代码无效。</li><li><code>&lt;script&gt;</code> 元素的 <code>type</code> 属性可以指定代码语言；值为 MIME 类型。</li></ul></div><h3 id="基本语法规则" tabindex="-1"><a class="header-anchor" href="#基本语法规则"><span>基本语法规则</span></a></h3><ul><li>JavaScript 语法部分必须是英文符号</li><li>JavaScript 代码由多条语句构成，语句以 <code>;</code> 结尾（<em>不具有强制性</em>）</li><li>JavaScript 代码从上到下同步执行</li><li>JavaScript 语言大小写敏感</li></ul><h3 id="输入输出语句" tabindex="-1"><a class="header-anchor" href="#输入输出语句"><span>输入输出语句</span></a></h3><blockquote><p>所有的输出输出语句都不是 ES 标准。</p></blockquote><p>输出语句：</p><ul><li><code>document.write()</code> 将数据输出到页面</li><li><code>alert()</code> 将数据以弹窗形式显示到页面</li><li><code>console.log()</code> 将数据输出到控制台</li></ul><p>输入语句：</p><ul><li><code>prompt(&quot;请输入：&quot;)</code> 弹出输入框，获取用户输入的数据 <ul><li>点击取消返回 <code>null</code></li><li>点击确定返回用户输入的字符串</li></ul></li></ul><h3 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释"><span>代码注释</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 单行注释</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/*</span></span>
<span class="line"><span style="color:#7B7F8B;">多行注释</span></span>
<span class="line"><span style="color:#7B7F8B;">*/</span></span></code></pre></div><h2 id="数据和数据类型" tabindex="-1"><a class="header-anchor" href="#数据和数据类型"><span>数据和数据类型</span></a></h2><p>数据：有用的信息<br> 数据类型：数据的分类</p><blockquote><p>直接书写的具体数据，称为<strong>字面量</strong>。</p></blockquote><h3 id="js-中的数据类型" tabindex="-1"><a class="header-anchor" href="#js-中的数据类型"><span>JS 中的数据类型</span></a></h3><ol><li>原始类型(不可再细分的类型) <ul><li><code>number</code> 数字类型</li><li><code>string</code> 字符串类型</li><li><code>boolean</code> 布尔类型</li><li><code>undefined</code> 未定义类型</li><li><code>null</code> 空类型</li></ul></li><li>引用类型 <ul><li><code>object</code> 对象</li><li><code>function</code> 函数</li></ul></li></ol><h4 id="数字类型" tabindex="-1"><a class="header-anchor" href="#数字类型"><span>数字类型</span></a></h4><p>表示小数、整数等<br> 书写方式：直接书写</p><blockquote><p>数字类型可以加上前缀，表示不同的进制；不加默认为十进制。<br> 前缀 <code>0</code> 表示八进制；前缀 <code>0x</code> 表示十六进制；前缀 <code>0b</code> 表示二进制。</p></blockquote><h4 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型"><span>字符串类型</span></a></h4><p>表示一长串文本（<em>0 个或多个文本</em>）</p><p>书写方式：</p><ol><li>单引号包裹 <code>&#39;some text&#39;</code></li><li>双引号包裹 <code>&quot;some text&quot;</code></li><li>反引号包裹（<em><strong>模板字符串</strong></em>）<code>\`some text\`</code></li></ol><div class="hint-container tip"><p class="hint-container-title">在字符串中表示特殊字符</p><p>使用转义符 <code>\\</code> 进行转义</p><ul><li><code>\\n</code> 换行符</li><li><code>\\t</code> 制表符</li></ul></div><div class="hint-container tip"><p class="hint-container-title">使用长数字还是字符串？</p><p>如果按照数字阅读则使用数字类型，否则使用字符串类型。</p></div><h4 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型"><span>布尔类型</span></a></h4><p>表示真或假</p><p>书写方式：</p><ul><li><code>true</code> 真</li><li><code>false</code> 假</li></ul><h4 id="undefined-类型" tabindex="-1"><a class="header-anchor" href="#undefined-类型"><span><code>undefined</code> 类型</span></a></h4><p>表示未定义</p><p>书写方式：<code>undefined</code></p><h4 id="null-类型" tabindex="-1"><a class="header-anchor" href="#null-类型"><span><code>null</code> 类型</span></a></h4><p>表示空值</p><p>书写方式：<code>null</code></p><h4 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h4><p>表示事物、东西等；对象可以由多个基本类型或对象组合而成</p><p>属性：对象的成员</p><details class="hint-container details"><summary>📍 对象示例</summary><div class="language-json" data-highlighter="shiki" data-ext="json" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-json"><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">小明</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 18</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">isStudent</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">address</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span>    </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">country</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">china</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>    </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">province</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">jiangsu</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>    </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">city</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">suzhou</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">，</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">girlFriend:</span><span style="color:#BF9EEE;"> null</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><h3 id="判断数据的类型" tabindex="-1"><a class="header-anchor" href="#判断数据的类型"><span>判断数据的类型</span></a></h3><h4 id="typeof-操作符" tabindex="-1"><a class="header-anchor" href="#typeof-操作符"><span><code>typeof</code> 操作符</span></a></h4><p>返回数据类型的<strong>字符串</strong></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> 123</span><span style="color:#7B7F8B;"> // &#39;number&#39;</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // &#39;string&#39;</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> true</span><span style="color:#7B7F8B;"> // &#39;boolean&#39;</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> undefined</span><span style="color:#7B7F8B;"> // &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> null</span><span style="color:#7B7F8B;"> // &#39;object&#39; // JS 特性</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> {} </span><span style="color:#7B7F8B;">// &#39;object&#39;</span></span></code></pre></div><blockquote><p>函数写法： <code>typeof()</code></p></blockquote><h2 id="变量-variable" tabindex="-1"><a class="header-anchor" href="#变量-variable"><span>变量 <em>variable</em></span></a></h2><p>变量是一块用于存放数据的<strong>内存空间</strong>。</p><h3 id="变量的使用" tabindex="-1"><a class="header-anchor" href="#变量的使用"><span>变量的使用</span></a></h3><ul><li>任何可以书写数据的地方都可以使用变量</li><li>无法使用一个未声明的变量 <ul><li>使用 <code>typeof</code> 时除外</li></ul></li></ul><h4 id="声明-定义-变量" tabindex="-1"><a class="header-anchor" href="#声明-定义-变量"><span>声明（<em>定义</em>）变量</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#7B7F8B;">// 声明了一个变量 a，声明后变量的值默认为 undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) </span><span style="color:#7B7F8B;">// undefined</span></span></code></pre></div><div class="hint-container info"><p class="hint-container-title">标识符的命名</p><p>在开发中，需要自行命名的位置，叫做标识符。</p><p>标识符的命名规则：</p><ol><li>必须以字母、下划线或 <code>$</code> 符号开头</li><li>其他位置可以出现数字、字母、下划线或 <code>$</code> 符号</li><li>不可以与关键字、保留字重复</li></ol><p>标识符命名命名规范：</p><ol><li>变量名应做到望文知义</li><li>多个单词使用驼峰命名法</li></ol></div><h4 id="变量的赋值" tabindex="-1"><a class="header-anchor" href="#变量的赋值"><span>变量的赋值</span></a></h4><p>赋值：向变量的内存空间中存放数据</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 将 123 存放到变量 a 中</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 123</span></span></code></pre></div><ul><li>变量可以被重新赋值，新的值会取代旧的值 <ul><li>JS 中变量的数据类型是可变的</li></ul></li><li>声明和赋值可以合并（<em>语法糖</em>）</li><li>多个变量可以合并声明并赋值（<em>语法糖</em>）</li></ul><details class="hint-container details"><summary>📍 语法糖示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#7B7F8B;">// 将变量 a 的数据**复制**到变量 b 中</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#7B7F8B;"> // 不影响变量 a 的数据（原始类型）</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  b </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  c </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 3</span></span></code></pre></div><blockquote><p>语法糖只是方便书写或记忆，没有实质性改变。</p></blockquote></details><h3 id="变量中的对象" tabindex="-1"><a class="header-anchor" href="#变量中的对象"><span>变量中的对象</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  account</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  password</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123456</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  isVip</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>读取对象变量的某个属性：<code>变量名.属性名</code></p><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li>当读取的属性不存在时，返回 <code>undefined</code></li><li>当读取的属性值不存在时（<em>属性值为 <code>undefined</code> / <code>null</code></em>），会报错</li></ul></div><p>修改对象变量的属性：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  account</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  password</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123456</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  isVip</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 修改 user 对象的 password 属性值</span></span>
<span class="line"><span style="color:#F6F6F4;">user.password </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">654321</span><span style="color:#DEE492;">&#39;</span></span></code></pre></div><p>当赋值的属性不存在时会自动添加该属性</p><div class="hint-container warning"><p class="hint-container-title">注意</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#7B7F8B;">// user 为 undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">user.name </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">shaw</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // 会报错：原始类型 undefined 不可以添加属性</span></span></code></pre></div></div><p>删除属性：<code>delete 变量名.属性名</code></p><blockquote><p>实际编程时一般将属性值设为 <code>undefined</code> 以达到类似效果</p></blockquote><h4 id="属性表达式" tabindex="-1"><a class="header-anchor" href="#属性表达式"><span>属性表达式</span></a></h4><p>给属性赋值或读取属性时可以使用 <code>变量名[&quot;属性名&quot;]</code></p><p>属性表达式的使用场景：</p><ul><li>属性名中包含特殊字符（<em>不是标准标识符</em>） <ul><li>实际上 JS 对属性名的命名并不严格，属性名可以为任意格式（<em>字符串</em>）</li></ul></li><li>属性名为变量</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> prop </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">user[prop] </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">shaw</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // 即 user.name = &#39;shaw&#39;</span></span></code></pre></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>属性名只能为<strong>字符串</strong><br> 如果不是字符串，如数字，宿主环境会自动将其转换为字符串</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#BF9EEE;">  0</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">obj[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">零</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">obj[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">zero</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]) </span><span style="color:#7B7F8B;">// &#39;zero&#39;</span></span></code></pre></div></div><h3 id="变量的声明提升" tabindex="-1"><a class="header-anchor" href="#变量的声明提升"><span>变量的声明提升</span></a></h3><p><strong>JS 中存在变量声明提升</strong>：<strong>所有</strong>变量的<strong>声明</strong>会自动提升到代码最顶部</p><p>JS 中允许声明多个同名变量，声明提升后<strong>声明会变为一个</strong></p><h3 id="全局对象" tabindex="-1"><a class="header-anchor" href="#全局对象"><span>全局对象</span></a></h3><p>JS 大部分宿主环境，都会提供一个特殊的对象，该对象可以在 JS 代码中直接访问，称为<strong>全局对象</strong></p><ul><li>浏览器全局对象：<code>window</code> (<em>表示整个窗口</em>)</li><li>Node.js 全局对象：<code>global</code> (<em>表示当前 Node.js 进程</em>)</li></ul><p><mark>开发者定义的所有变量实际上会成为全局对象的属性；但如果变量没有被赋值，则该变量不会覆盖全局对象中的同名属性</mark></p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>全局对象中的所有属性可以直接使用，前面无需加上全局对象名</li><li>变量赋值时不写 <code>var</code> 关键字，相当于直接给 <code>window</code> 的某个属性赋值</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> console </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 报错：console 被覆盖为字符串</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> console</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 正常输出</span></span>
<span class="line"><span style="color:#F6F6F4;">console </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // 无法访问声明的 console 变量，实际访问的是全局对象中的 console 属性</span></span></code></pre></div></div><details class="hint-container details"><summary>📚 <code>window</code> 中特殊的 <code>name</code> 属性</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> name</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(name) </span><span style="color:#7B7F8B;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> name) </span><span style="color:#7B7F8B;">// string</span></span>
<span class="line"><span style="color:#7B7F8B;">// 因为 window 对象中含有属性 name</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(name) </span><span style="color:#7B7F8B;">// &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> name) </span><span style="color:#7B7F8B;">// string</span></span>
<span class="line"><span style="color:#7B7F8B;">// name 属性会将任何赋值特殊处理为字符串</span></span></code></pre></div><blockquote><p>类似还有 <code>status</code> 等属性</p></blockquote></details><h3 id="引用类型变量的存储机制" tabindex="-1"><a class="header-anchor" href="#引用类型变量的存储机制"><span>引用类型变量的存储机制</span></a></h3><ul><li><p>原始类型的变量存放具体的内容到内存中</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">456</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) </span><span style="color:#7B7F8B;">// &#39;123&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(b) </span><span style="color:#7B7F8B;">// &#39;456&#39;</span></span></code></pre></div></li><li><p>引用类型的变量会另外开辟一块新的内存空间，存放对象的内容，再将该<strong>内存空间的地址</strong>存放到变量中</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj1</span></span>
<span class="line"><span style="color:#F6F6F4;">obj2.name </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">456</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj1.name) </span><span style="color:#7B7F8B;">// &#39;456&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj2.name) </span><span style="color:#7B7F8B;">// &#39;456&#39;</span></span></code></pre></div><p><code>obj1</code> 指向某对象（<em><code>obj1</code> 持有某对象的引用</em>）；<code>obj2</code> 指向同一对象（<em><code>obj2</code> 也持有同一对象的引用</em>）</p></li></ul><p><mark>出现对象字面量的位置，都一定会在内存中开辟一个新的空间</mark></p><details class="hint-container details"><summary>📍 对象的存储机制示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">小明</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 18</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  address</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 新的空间</span></span>
<span class="line"><span style="color:#F6F6F4;">    country</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">china</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">小红</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 18</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  address</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> user1.address</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">user2.name </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">小刚</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">user2.address.country </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">uk</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(user1.name, user2.name) </span><span style="color:#7B7F8B;">// &#39;小明&#39; &#39;小刚&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(user1.address.country, user2.address.country) </span><span style="color:#7B7F8B;">// &#39;uk&#39; &#39;uk&#39;</span></span></code></pre></div></details><blockquote><p>出现一对 <code>{}</code> 即为一块新的内存空间</p></blockquote><details class="hint-container details"><summary>📝 练习：变量交换</summary><div class="language-html" data-highlighter="shiki" data-ext="html" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-html"><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a</span></span>
<span class="line"><span style="color:#F6F6F4;">  a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b</span></span>
<span class="line"><span style="color:#F6F6F4;">  b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a, b) </span><span style="color:#7B7F8B;">// 2 1</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 交换 parent 和 child 属性，但不创建新的对象</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    parent</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">456</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    child</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">789</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> item.parent</span></span>
<span class="line"><span style="color:#F6F6F4;">  item.parent </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> item.child</span></span>
<span class="line"><span style="color:#F6F6F4;">  item.child </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre></div></details><h4 id="js-中的垃圾回收" tabindex="-1"><a class="header-anchor" href="#js-中的垃圾回收"><span>JS 中的垃圾回收</span></a></h4><p>JS 引擎中的垃圾回收器会定期的发现内存中无法访问到的对象，该对象称之为垃圾；<br> JS 引擎会在合适的时间将垃圾占用的内存空间释放。</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>运算符解决数据的运算问题</p><h3 id="操作符和操作数" tabindex="-1"><a class="header-anchor" href="#操作符和操作数"><span>操作符和操作数</span></a></h3><p>操作符：<em>运算符</em>，参与运算的符号<br> 操作数：参与运算的数据，也称之为<strong>元</strong> / <strong>目</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>操作符不一定只有一个符号</li><li>操作符出现在不同的位置可能具有不同的含义</li></ul></div><details class="hint-container details"><summary>📍 操作符示例</summary><ol><li><code>=</code> 赋值符，将右边的数据赋值给左边</li><li><code>.</code> 访问符，用于访问对象的属性</li><li><code>[]</code> 访问符，同上</li><li><code>()</code> 函数调用符</li></ol></details><h3 id="运算符的分类" tabindex="-1"><a class="header-anchor" href="#运算符的分类"><span>运算符的分类</span></a></h3><p>按操作数数量分类：</p><ul><li>一元（<em>单目</em>）运算符 <ul><li><code>()</code>, <code>.</code>, <code>[]</code>...</li></ul></li><li>二元（<em>双目</em>）运算符 <ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>=</code>...</li></ul></li><li>三元（<em>三目</em>）运算符 <ul><li><code>?</code>, <code>:</code></li></ul></li></ul><p>按功能分类：</p><ul><li>算术（<em>数学</em>）运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li><li>其他...</li></ul><h3 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式"><span>表达式</span></a></h3><p>表达式 = 操作符 + 操作数</p><p>每个表达式都有一个运算结果，该结果称为<strong>返回值</strong>；返回值的类型称为<strong>返回类型</strong></p><p><mark>所有的表达式都可以当作数据使用</mark></p><div class="hint-container tip"><p class="hint-container-title">字面量与表达式</p><ul><li>字面量：直接书写的固定数据</li><li>表达式：产生值的过程</li><li>字面量是表达式的一个子集</li></ul></div><h4 id="常见表达式的返回值" tabindex="-1"><a class="header-anchor" href="#常见表达式的返回值"><span>常见表达式的返回值</span></a></h4><ol><li><p><code>=</code> 赋值符：返回赋的值</p><ul><li><code>a = b = c = 1</code> 利用返回值赋值多个变量</li><li>如果为声明 + 赋值的表达式，返回值为 <code>undefined</code></li></ul></li><li><p><code>.</code> 访问符：返回属性的值</p></li><li><p><code>()</code> 函数调用符：返回的结果取决于函数的运行结果</p><ul><li><code>console.log()</code> 的返回值为 <code>undefined</code></li></ul><blockquote><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// undefined</span></span></code></pre></div></blockquote></li></ol><div class="hint-container info"><p class="hint-container-title"><code>REPL</code> 环境</p><p>浏览器控制台的环境为 <code>REPL</code> 环境：<br> REPL(Read-Eval-Print-Loop)：读取-执行-打印-循环<br> 直接在控制台书写代码时，除了会执行代码，还会输出该表达式的返回值</p></div><h4 id="在模板字符串中使用表达式" tabindex="-1"><a class="header-anchor" href="#在模板字符串中使用表达式"><span>在模板字符串中使用表达式</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">Mike</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 18</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  gender</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> example </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> \`</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">user.name</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">user.age</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> years old, gender is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">user.gender</span><span style="color:#F286C4;"> ==</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> ?</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">Male</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;"> :</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">Female</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">.\`</span></span></code></pre></div><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><ul><li><code>+</code> 加 / 正</li><li><code>-</code> 减 / 负</li><li><code>*</code> 乘</li><li><code>/</code> 除</li><li><code>%</code> 求余数（与取模有细微区别）</li><li><code>++</code> 自增</li><li><code>--</code> 自减</li><li><code>**</code> 幂运算</li></ul><h4 id="运算中的特殊数字" tabindex="-1"><a class="header-anchor" href="#运算中的特殊数字"><span>运算中的特殊数字</span></a></h4><ul><li>当除数为 <code>0</code> 时，得到关键字 <code>Infinity</code> (<code>number</code> 类型) <ul><li>被除数为正数：<code>Infinity</code> 正无穷</li><li>被除数为负数：<code>-Infinity</code> 负无穷</li><li>被除数为 <code>0</code>：<code>NaN</code> (<em>Not a Number</em>, 非数字，<code>number</code> 类型)</li></ul></li><li><code>NaN</code> 虽然虽然是数字，但其和任何数字进行算术运算的结果都是 <code>NaN</code></li></ul><details class="hint-container details"><summary>📚 <code>isNaN</code> 函数：返回一个数据是否为 <code>NaN</code></summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#62E884;">isNaN</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#62E884;">isNaN</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span></code></pre></div></details><details class="hint-container details"><summary>📚 <code>isFinite</code> 函数：返回一个数据是否为有限数字</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#62E884;">isFinite</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">Infinity</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#62E884;">isFinite</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">Infinity</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#62E884;">isFinite</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#62E884;">isFinite</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// true</span></span></code></pre></div></details><h4 id="求余运算符" tabindex="-1"><a class="header-anchor" href="#求余运算符"><span><code>%</code> 求余运算符</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F286C4;"> %</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">5</span><span style="color:#F286C4;"> %</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// -1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F286C4;"> %</span><span style="color:#F286C4;"> -</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">10</span><span style="color:#F286C4;"> %</span><span style="color:#F286C4;"> -</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// -1</span></span></code></pre></div><details class="hint-container details"><summary>📚 求余和取模</summary><ul><li>求余（<em>x rem y</em>）：x - n * y <ul><li>n = x / y （<em>向零取整：直接去掉小数</em>）</li><li>余数与<strong>被除数符号相同</strong>；与除数的符号无关</li></ul></li><li>取模（<em>x mod y</em>）：x - n * y <ul><li>n = x / y （<em>向下取整</em>）</li><li>余数与<strong>除数的符号相同</strong>；与被除数符号无关</li></ul></li></ul></details><h4 id="非数字类型使用算术运算符" tabindex="-1"><a class="header-anchor" href="#非数字类型使用算术运算符"><span>非数字类型使用算术运算符</span></a></h4><p>算数运算符（除 <code>+</code> 外）遇到非数字的类型时，会将其转换为数字类型（自动完成转换），然后进行运算；</p><blockquote><p>运算中的类型转换不会影响原数据</p></blockquote><div class="hint-container important"><p class="hint-container-title">（非 <code>+</code> 运算符）转换规则</p><blockquote><p><code>valueOf()</code></p></blockquote><ol><li><p><code>true</code> ==&gt; <code>1</code>; <code>false</code> ==&gt; <code>0</code></p></li><li><p><code>null</code> ==&gt; <code>0</code></p></li><li><p><code>undefined</code> ==&gt; <code>NaN</code></p></li><li><p><code>string</code> 类型：</p><ul><li>如果字符串内部是一个正确的数字（含 <code>Infinity</code>），则直接转换为数字</li><li>如果字符串内部不是一个正确的数字，则转换为 <code>NaN</code></li><li>如果是一个空字符串 <code>&quot;&quot;</code>，转换为 <code>0</code></li><li>字符串转换时会忽略首尾空格</li></ul></li><li><p><code>object</code> 类型：将对象类型先转换为字符串 <code>&quot;[object Object]&quot;</code>, 然后再将该字符串转换为数字类型，即 <code>NaN</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">{} </span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;"> 5</span><span style="color:#7B7F8B;"> // 报错：{} 被解释为代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">({} </span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;"> 5</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// ==&gt; NaN * 5 // NaN</span></span></code></pre></div></li></ol></div><div class="hint-container tip"><p class="hint-container-title">一元 <code>+</code></p><p>通常在非数字的类型前面加 <code>+</code> 运算符，可以强制转换为数字类型</p><ul><li><code>+true</code> ==&gt; <code>1</code></li><li><code>+{}</code> ==&gt; <code>NaN</code></li></ul><blockquote><p>JS 中 <code>0</code> 分为 <code>+0</code> 和 <code>-0</code> 两种形式。</p></blockquote></div><div class="hint-container important"><p class="hint-container-title">多元 <code>+</code> 运算符的运算规则</p><blockquote><p><code>valueOf()</code> 再 <code>toString()</code></p></blockquote><ol><li>加号某一边出现 <code>string</code> / <code>object</code> 类型：进行字符串拼接(将其他类型转为字符串) <ul><li>数字 ==&gt; 数字字符串</li><li><code>null</code> ==&gt; <code>&quot;null&quot;</code></li><li><code>undefined</code> ==&gt; <code>&quot;undefined&quot;</code></li><li><code>boolean</code> ==&gt; <code>&quot;true&quot;</code> / <code>&quot;false&quot;</code></li><li>普通 <code>object</code> ==&gt; <code>&quot;[object Object]&quot;</code></li></ul></li><li>加号两边都为其他原始类型：<a href="#%E9%9D%9E%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6">转为数字运算</a></li></ol></div><h4 id="自增与自减" tabindex="-1"><a class="header-anchor" href="#自增与自减"><span>自增与自减</span></a></h4><ul><li><code>++</code> 将某个变量的值自增 <code>1</code></li><li><code>--</code> 将某个变量的值自减 <code>1</code></li></ul><p>自增与自减表达式：</p><ul><li><code>x++</code> 将变量 <code>x</code> 自增 <code>1</code>; 返回自增之前 <code>x</code> 的值（<em>先返回后自增</em>）</li><li><code>++x</code> 将变量 <code>x</code> 自增 <code>1</code>; 返回自增之后 <code>x</code> 的值（<em>先自增后返回</em>）</li><li><code>x--</code> 将变量 <code>x</code> 自减 <code>1</code>; 返回自减之前 <code>x</code> 的值</li><li><code>--x</code> 将变量 <code>x</code> 自减 <code>1</code>; 返回自减之后 <code>x</code> 的值</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span></code></pre></div><h4 id="算数运算符优先级" tabindex="-1"><a class="header-anchor" href="#算数运算符优先级"><span>算数运算符优先级</span></a></h4><p><code>++</code>，<code>--</code> &gt;&gt; <code>+</code> 正，<code>-</code> 负 &gt;&gt; <code>**</code> &gt;&gt; <code>*</code>，<code>/</code>，<code>%</code> &gt;&gt; <code>+</code> 加，<code>-</code> 减 &gt;&gt; <code>=</code> 赋值</p><div class="hint-container important"><p class="hint-container-title">运算符优先级的运行细节</p><ul><li>从左到右依次查看，每次运算后再从左开始查看</li><li>如果遇到操作数，则将数据的值直接取出</li><li>如果遇到相邻的两个运算符，左边的运算符优先级大于等于右边，则运行左边的运算</li></ul></div><details class="hint-container details"><summary>📝 练习：运算符优先级</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> +</span><span style="color:#BF9EEE;"> 1</span><span style="color:#7B7F8B;"> // 1 + 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y) </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x) </span><span style="color:#7B7F8B;">// 2</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> /</span><span style="color:#BF9EEE;"> 0</span><span style="color:#7B7F8B;"> // typeof 优先级高于 /</span></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;number&quot; / 0</span></span>
<span class="line"><span style="color:#7B7F8B;">// NaN / 0</span></span>
<span class="line"><span style="color:#7B7F8B;">// NaN</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#F286C4;"> ++</span><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + x++ * ++x + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * ++x + x // x ==&gt; 2</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * 3 + x // x ==&gt; 3</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 3 + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 4 + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 7</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#F6F6F4;"> (x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#F286C4;"> ++</span><span style="color:#F6F6F4;">x) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + x++ * (x = x + x++ * ++x) + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = x + x++ * ++x) + x // x ==&gt; 2</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 2 + x++ * ++x) + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 2 + 2 * ++x) + x // x ==&gt; 3</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 2 + 2 * 4) + x // x ==&gt; 4</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 2 + 8) + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 10) + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 10 + x // x ==&gt; 10</span></span>
<span class="line"><span style="color:#7B7F8B;">// 11 + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 21</span></span></code></pre></div></details><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h3><ul><li>比较运算符的返回值为 <code>true</code> / <code>false</code></li><li>算术运算符的优先级高于比较运算符</li></ul><h4 id="大小比较" tabindex="-1"><a class="header-anchor" href="#大小比较"><span>大小比较</span></a></h4><ul><li><code>&gt;</code> 大于</li><li><code>&lt;</code> 小于</li><li><code>&gt;=</code> 大于等于</li><li><code>&lt;=</code> 小于等于</li></ul><p>比较规则：</p><ol><li><p>其中一边为<strong>非字符串</strong>的原始类型：<a href="#%E9%9D%9E%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6">转换为数字比较</a></p></li><li><p>两边都为字符串：比较对位字符的 ASCII 编码(<em>从前往后，没有对位按 0 计算</em>)</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">A</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;"> &gt;</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">B</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 65 &gt; 66 ==&gt; false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`AB\`</span><span style="color:#F286C4;"> &gt;</span><span style="color:#E7EE98;"> \`AC\`</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 65 = 65; 66 &gt; 67 ==&gt; false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">11</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;"> &gt;</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 49= 49; 49 &gt; 0 ==&gt; true</span></span></code></pre></div></li><li><p>其中一边为对象：将对象转换为原始类型（<em><code>&quot;[object Object]&quot;</code> ==&gt; <code>NaN</code></em>）再按以上两种规则比较</p></li></ol><div class="hint-container tip"><p class="hint-container-title">特殊数字比较规则</p><ul><li><code>NaN</code> 与其他任何数字比较，结果为 <code>false</code></li><li><code>Infinity</code> 大于任何其他数字</li><li><code>- Infinity</code> 小于任何其他数字</li></ul></div><h4 id="相等比较" tabindex="-1"><a class="header-anchor" href="#相等比较"><span>相等比较</span></a></h4><ul><li><code>==</code> 比较两个数据是否相等</li><li><code>!=</code> 比较两个数据是否不相等</li></ul><p>两边的类型相同：直接比较数据本身（<em>两个对象比较对象地址</em>）</p><p>两边类型不同：</p><ol><li><code>null</code> 与 <code>undefined</code> 互相相等；但与其他类型不等</li><li>其他原始类型<a href="#%E9%9D%9E%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6">转换为数字比较</a></li><li>其中一边为对象比较时，转换为原始类型再比较</li></ol><div class="hint-container important"><p class="hint-container-title">特殊数字相等规则</p><ul><li><code>NaN</code> 与任何数字（<em>包括自身</em>）都不相等</li><li><code>Infinity</code> / <code>-Infinity</code> 只与自身相等</li></ul></div><blockquote><p>由于 <code>==</code> 规则比较违反直觉，通常不使用 <code>==</code> 进行相等比较</p></blockquote><h4 id="严格相等" tabindex="-1"><a class="header-anchor" href="#严格相等"><span>严格相等</span></a></h4><ul><li><code>===</code> 严格相等，两端类型和数据必须都相同</li><li><code>!==</code> 严格不相等，两端类型或数据任一不相同</li></ul><p>两端类型不相同：直接返回 <code>false</code><br> 类型相同：比较数据本身（<em>对象比较地址</em>）</p><div class="hint-container important"><p class="hint-container-title">特殊数字严格相等规则</p><ul><li><code>NaN</code> 与任何数字（<em>包括自身</em>）都不相等</li><li><code>Infinity</code> / <code>-Infinity</code> 只与自身相等</li></ul></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><p><mark>逻辑运算符的返回值不一定为 <code>Boolean</code> 类型</mark></p><h4 id="与-并且" tabindex="-1"><a class="header-anchor" href="#与-并且"><span>与 / 并且 <code>&amp;&amp;</code></span></a></h4><p>&lt;表达式 1&gt; <code>&amp;&amp;</code> &lt;表达式 2&gt;</p><p>执行过程：<br> 将&lt;表达式 1&gt;进行 Boolean 判定；<br> 若&lt;表达式 1&gt;判定结果为假，则直接返回&lt;表达式 1&gt;的结果，<strong>而不执行&lt;表达式 2&gt;</strong>；<br> 若&lt;表达式 1&gt;为真，则返回&lt;表达式 2&gt;的结果（<em>短路规则</em>）</p><div class="hint-container important"><p class="hint-container-title">Boolean 判定</p><p>以下数据均判断为 <code>false</code> (<em>其他数据均为 <code>true</code></em>)：</p><ul><li><code>false</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>NaN</code></li><li><code>&#39;&#39;</code></li><li><code>0</code></li></ul></div><h4 id="或" tabindex="-1"><a class="header-anchor" href="#或"><span>或 <code>||</code></span></a></h4><p>&lt;表达式 1&gt; <code>||</code> &lt;表达式 2&gt;</p><p>执行过程：将&lt;表达式 1&gt;进行 Boolean 判定；<br> 若&lt;表达式 1&gt;判定结果为真，则直接返回&lt;表达式 1&gt;的结果，<strong>而不执行&lt;表达式 2&gt;</strong>；<br> 若&lt;表达式 1&gt;为假则返回&lt;表达式 2&gt;的结果（<em>短路规则</em>）</p><h4 id="非" tabindex="-1"><a class="header-anchor" href="#非"><span>非 <code>!</code></span></a></h4><p><code>!</code> &lt;表达式&gt;：将表达式的 Boolean 判定结果取反（<em>一定返回 <code>Boolean</code> 类型</em>）</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;"> +</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span></code></pre></div><details class="hint-container details"><summary>📝 练习：逻辑运算符</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 100</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 100</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 0</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 4</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 0</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;"> -</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">age </span><span style="color:#F286C4;">&lt;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> (age </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(age) </span><span style="color:#7B7F8B;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> y</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> y</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 4</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> y</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 4</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y) </span><span style="color:#7B7F8B;">// 4</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;"> &gt;</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> 10</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 10</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">undefined</span><span style="color:#F286C4;"> ||</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &#39;abc&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> null</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> undefined</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> NaN</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">小明</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">user.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> user.age </span><span style="color:#F286C4;">||</span><span style="color:#BF9EEE;"> 18</span></span>
<span class="line"><span style="color:#7B7F8B;">// user.age === undefined &amp;&amp; user.age = 18</span></span></code></pre></div></details><details class="hint-container details"><summary>📝 练习：判断闰年</summary><p>在变量中存放年份；使用逻辑判断该年是否为闰年。<br> 闰年规则：四年一闰，百年不闰，四百年再闰。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> year </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2009</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> year </span><span style="color:#F286C4;">%</span><span style="color:#BF9EEE;"> 4</span><span style="color:#F286C4;"> ===</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> (year </span><span style="color:#F286C4;">%</span><span style="color:#BF9EEE;"> 100</span><span style="color:#F286C4;"> !==</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F286C4;"> ||</span><span style="color:#F6F6F4;"> year </span><span style="color:#F286C4;">%</span><span style="color:#BF9EEE;"> 400</span><span style="color:#F286C4;"> ===</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">((result </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">是闰年</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">||</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">不是闰年</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span></code></pre></div></details><h3 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h3><p>&lt;表达式 1&gt; <code>?</code> &lt;表达式 2&gt; <code>:</code> &lt;表达式 3&gt;</p><p>执行过程：对&lt;表达式 1&gt;进行 Boolean 判定，若为真，则返回&lt;表达式 2&gt;的结果；若为假，则返回&lt;表达式 3&gt;的结果</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> ?</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> :</span><span style="color:#F286C4;"> ++</span><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">*</span><span style="color:#F286C4;"> ++</span><span style="color:#F6F6F4;">x </span><span style="color:#7B7F8B;">// x++ * ++x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 2 * 3</span></span>
<span class="line"><span style="color:#7B7F8B;">// 6</span></span></code></pre></div><h3 id="复合赋值运算符" tabindex="-1"><a class="header-anchor" href="#复合赋值运算符"><span>复合赋值运算符</span></a></h3><ul><li><code>+=</code> 加等于</li><li><code>-=</code> 减等于</li><li><code>*=</code> 乘等于</li><li><code>/=</code> 除等于</li><li><code>%=</code> 求余等于</li><li><code>**=</code> 幂等于</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">+=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#7B7F8B;"> // x = x + 1</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">*=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> +</span><span style="color:#BF9EEE;"> 2</span><span style="color:#7B7F8B;"> // x = x * (1 + 2)</span></span></code></pre></div><h3 id="void-运算符" tabindex="-1"><a class="header-anchor" href="#void-运算符"><span><code>void</code> 运算符</span></a></h3><p>一元运算符；运行表达式，并返回 <code>undefined</code></p><ul><li>普通写法 <code>void</code> &lt;操作数&gt;</li><li>函数写法 <code>void(</code> &lt;表达式&gt; <code>)</code></li></ul><h3 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符"><span>逗号运算符</span></a></h3><p>&lt;表达式 1&gt; <code>,</code> &lt;表达式 2&gt;</p><p>依次运行表达式，然后返回&lt;表达式 2&gt;的结果</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">, x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">, x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// x = 6</span></span></code></pre></div><blockquote><p>逗号运算符的优先级低于赋值运算符</p></blockquote><h3 id="js-如何存储数字" tabindex="-1"><a class="header-anchor" href="#js-如何存储数字"><span>JS 如何存储数字</span></a></h3><ul><li>JS 中小数和整数的运算都是不精确的</li><li>JS 中整数不是连续的 <ul><li>当数字特别大时不再连续</li></ul></li><li>JS 中十进制的小数，转换为二进制后，可能是无限小数；由于存储能力限制，因此会丢失一些精度</li></ul><p><mark>在对精度要求很高的系统中，或要对小数运算结果进行比较时，需要特别注意</mark></p><details class="hint-container details"><summary>📚 计算机语言存储数字的方式</summary><ol><li>整数法</li><li>浮点法 <ul><li>浮点法存放的数字叫 <em>浮点数</em></li><li>浮点数分为单精度和双精度</li><li>双精度存放的有效位数更多，占用空间更大</li></ul></li></ol><p>计算机中，位（<em>bit</em>）是计算机最小的存储单位，一个位可以存储 <code>0</code> 或 <code>1</code> 两种状态</p><ul><li>1 byte = 8 bit</li><li>1 KB = 1024 byte</li></ul></details><p>JS 中存储的所有数字，都按照双精度浮点数存放(IEEE 754 标准)：</p><ul><li>每个数字开辟一个内存空间，尺寸固定为64位 <ul><li>第 <code>1</code> 位：表示符号位，<code>0</code> 表示正数，<code>1</code> 表示负数</li><li>第 <code>2 ~ 12</code> 位（<em>11位</em>）：表示指数位，即 2 为底的指数（<em>2 的次方</em>），其范围为 <code>0 ~ 2047</code></li><li>第 <code>13 ~ 64</code> 位（<em>52位</em>）：表示尾数，相当于<code>1.xxxx</code> 的小数位</li></ul></li><li>表示的十进制数的方法 <code>1.尾数 * 2 ^ (指数位 - 1023)</code></li></ul><p>特殊情况：</p><ol><li>指数为 <code>0</code>，尾数为 <code>0</code>：表示 <code>0</code></li><li>指数为 <code>2047</code>，尾数为 <code>0</code>：表示 <code>Infinity</code> / <code>-Infinity</code></li><li>指数为 <code>2047</code>，尾数非 <code>0</code>：表示 <code>NaN</code></li></ol><blockquote><p>一个正常的数字的指数部分最大为 2046</p></blockquote><ul><li>JS 能表示的最大数字： <code>Number.MAX_VALUE</code> 即 <code>0 11111111110 111....111</code></li><li>JS 能表示的最小正数： <code>Number.MIN_VALUE</code> 即 <code>0 00000000000 000....001</code></li><li>JS 能表示的最大安全数（<em>最大连续整数</em>）：<code>Number.MAX_SAFE_INTEGER</code> 即 <code>0 10000110011 111...111</code> 即 <code>2^53 - 1</code></li></ul><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h3><p>将一个整数的二进制格式进行计算；在 JS 中，如果对一个数据进行位运算，先会将其转换为一个整数（<em>直接抹去小数部分</em>），然后按照 <strong>32 位</strong>的二进制格式进行运算</p><div class="hint-container info"><p class="hint-container-title">32 位二进制格式</p><ul><li>第一位为符号位，其余为数据位</li><li>特殊数字的32 位二进制：全为 <code>0</code></li></ul></div><h4 id="与运算" tabindex="-1"><a class="header-anchor" href="#与运算"><span>与运算 <code>&amp;</code></span></a></h4><p>&lt;整数 1&gt; <code>&amp;</code> &lt;整数 2&gt;</p><p>将两个整数按位比较，如果都为 <code>1</code>，则结果为 <code>1</code>，否则为 <code>0</code></p><h4 id="或运算" tabindex="-1"><a class="header-anchor" href="#或运算"><span>或运算 <code>|</code></span></a></h4><p>&lt;整数 1&gt; <code>|</code> &lt;整数 2&gt;</p><p>将两个整数按位比较，如果有一个为 <code>1</code>，则结果为 <code>1</code>，否则为 <code>0</code></p><h4 id="否运算" tabindex="-1"><a class="header-anchor" href="#否运算"><span>否运算 <code>~</code></span></a></h4><p><code>~</code> &lt;整数&gt;</p><p>将该整数按位取反</p><blockquote><p>快速算法：该整数的相反数减一</p></blockquote><details class="hint-container details"><summary>📍 JS 中最快速的取整</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">~~</span><span style="color:#BF9EEE;">3.5</span><span style="color:#7B7F8B;"> // 3</span></span></code></pre></div></details><h4 id="异或运算" tabindex="-1"><a class="header-anchor" href="#异或运算"><span>异或运算 <code>^</code></span></a></h4><p>&lt;整数 1&gt; <code>^</code> &lt;整数 2&gt;</p><p>将两个整数按位比较，相同为 <code>0</code>，否则为 <code>1</code></p><details class="hint-container details"><summary>📍 位的叠加 / 位的开关</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 权限枚举</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> perm </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  read</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 0b001</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  write</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 0b010</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  create</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 0b100</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 保存权限</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> perm.read </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> perm.write</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 判断权限</span></span>
<span class="line"><span style="color:#F6F6F4;">p </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> (perm.read </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> perm.read) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">有读权限</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">无读权限</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 去掉权限</span></span>
<span class="line"><span style="color:#F6F6F4;">p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (p </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> perm.read) </span><span style="color:#F286C4;">^</span><span style="color:#F6F6F4;"> perm.read</span></span></code></pre></div></details><h4 id="左移运算" tabindex="-1"><a class="header-anchor" href="#左移运算"><span>左移运算 <code>&lt;&lt;</code></span></a></h4><p>&lt;整数&gt; <code>&lt;&lt;</code> &lt;位数&gt;</p><p>将整数的二进制数据位向左移动指定位数（<em>即 <code>整数 * 2 ^ n</code></em>）</p><h4 id="右移运算" tabindex="-1"><a class="header-anchor" href="#右移运算"><span>右移运算 <code>&gt;&gt;</code></span></a></h4><p>&lt;整数&gt; <code>&gt;&gt;</code> &lt;位数&gt;</p><p>将整数的二进制数据位向右移动指定位数（<em>即 <code>整数 / 2 ^ n</code> 并取整</em>）</p><blockquote><p><code>&gt;&gt;&gt;</code> 全右移运算：包含符号位向右位移</p></blockquote><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制"><span>流程控制</span></a></h2><h3 id="判断" tabindex="-1"><a class="header-anchor" href="#判断"><span>判断</span></a></h3><h4 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span><code>if</code> 语句</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 单个 if 结构</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (条件表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (条件表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (条件表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 可以没有 else if</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 可以没有 else</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>对条件表达式进行<a href="#%E4%B8%8E--%E5%B9%B6%E4%B8%94-">Boolean判定</a>；若为真，则执行代码块；</p><ul><li>如果代码块只有一条语句则可以省略 <code>{}</code></li><li><strong>如果某个条件判定为真则忽略后面所有条件</strong></li></ul><details class="hint-container details"><summary>📍 if 语句示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> score </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 85</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (score </span><span style="color:#F286C4;">&gt;=</span><span style="color:#BF9EEE;"> 90</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">优秀</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (score </span><span style="color:#F286C4;">&gt;=</span><span style="color:#BF9EEE;"> 80</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">良好</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (score </span><span style="color:#F286C4;">&gt;=</span><span style="color:#BF9EEE;"> 60</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">及格</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">不及格</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">x) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> x </span><span style="color:#7B7F8B;">// 声明提升</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">++</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">&gt;=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">++</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">--</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x) </span><span style="color:#7B7F8B;">// 3</span></span></code></pre></div></details><h4 id="switch-语句-开关" tabindex="-1"><a class="header-anchor" href="#switch-语句-开关"><span><code>switch</code> 语句（<em>开关</em>）</span></a></h4><blockquote><p><code>switch</code> 的语法始终可以使用 <code>if</code> 语句替代</p></blockquote><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">switch</span><span style="color:#F6F6F4;"> (表达式) {</span></span>
<span class="line"><span style="color:#F286C4;">  case</span><span style="color:#F6F6F4;"> 数据1:</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">  case</span><span style="color:#F6F6F4;"> 数据2:</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">  default</span><span style="color:#F6F6F4;">: </span><span style="color:#7B7F8B;">// 可选，都不匹配时执行</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>计算表达式的返回值，依次和 <code>case</code> 后的数据进行<strong>严格相等</strong>比较；如果某个 <code>case</code> 相等，则停止比较并运行其内部的代码块，<strong>然后依次运行之后所有 <code>case</code> 的代码块</strong>。</p><p>在 <code>case</code> 分支内部使用 <code>break</code> 关键字，可以立刻停止 <code>switch</code> 结构：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">switch</span><span style="color:#F6F6F4;"> (表达式) {</span></span>
<span class="line"><span style="color:#F286C4;">  case</span><span style="color:#F6F6F4;"> 数据1:</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">    break</span></span>
<span class="line"><span style="color:#F286C4;">  case</span><span style="color:#F6F6F4;"> 数据2:</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">    break</span></span>
<span class="line"><span style="color:#F286C4;">  default</span><span style="color:#F6F6F4;">:</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">    break</span><span style="color:#7B7F8B;"> // 可以省略</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h3><p>重复运行一段代码</p><blockquote><p>条件永远满足则为死循环，无法退出</p></blockquote><h4 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span><code>for</code> 循环</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 初始化表达式的声明提升</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (初始化表达式; 条件表达式; 迭代表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div>`,255)),o(l,{code:"eJxLy8kvT85ILCpR8AniUlAI1tB4uqfh6fLup/tWPe9br6mpoKtrp+AY/bRjLkiwZ9qLhSte7Nv3dE9/LFC1I1jWqfrZ3IVPdm+DS9UCpZyAUgolRaWpYCXO0U92L36+oPHp3Okgfc5gQZfoF/vXAsVRjHSBGAkzIS0xpxhihKuGxsuGhqftu2Au4wIAfMJTBA=="}),s[2]||(s[2]=a(`<h4 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span><code>while</code> 循环</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (条件表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div>`,2)),o(l,{code:"eJxLy8kvT85ILCpR8AniUlAI1tB4uqfh6fLup/tWPe9br6mpoKtrp+BY/Wzuwie7t71YuOLFvn1P9/TXApU6AqUUSopKU8FKnKKf7F78fEHj07nTY4GSThB9MGVpiTnFEHWuGhovGxqetu+CWcAFAEsvNfg="}),s[3]||(s[3]=a(`<h4 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环"><span><code>do-while</code> 循环</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">do</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (条件表达式)</span></span></code></pre></div><p>先运行一次循环体再进行条件判断</p>`,3)),o(l,{code:"eJxLy8kvT85ILCpR8AniUlAI1tB4uqfh6fJuTU0FXV07BafoJ7sXP1/Q+HTu9FigtBNY0LH62dyFT3Zve7FwxYt9+57u6a8FSjkCpRRKikpTIfpgImmJOcUQIVcNjZcNDU/bd2lqcgEA+NItFw=="}),s[4]||(s[4]=a(`<h4 id="for-in-循环" tabindex="-1"><a class="header-anchor" href="#for-in-循环"><span><code>for in</code> 循环</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> prop </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> 对象) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>取出对象所有属性名，每次循环将其中一个<strong>属性名</strong>赋值给 <code>prop</code>，然后执行代码块</p><div class="hint-container important"><p class="hint-container-title"><code>in</code> 关键字</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">属性名 </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> 对象</span></span></code></pre></div><p>判断对象是否有指定<strong>属性名（<em>字符串</em>）</strong>，返回 <code>true</code> / <code>false</code></p></div><h4 id="循环控制语句" tabindex="-1"><a class="header-anchor" href="#循环控制语句"><span>循环控制语句</span></a></h4><ol><li><code>break</code> 跳出当前循环结构</li><li><code>continue</code> 跳过本次循环，进入下一次循环</li></ol><blockquote><p>多层循环分开分析</p></blockquote><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p>用于存放多个数据</p><h3 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组"><span>创建数组</span></a></h3><ol><li><code>new Array(长度)</code> 创建指定长度的空数组 <ul><li>长度：数组的数据总数，非负整数</li></ul></li><li><code>new Array(元素1, 元素2, ...)</code> 创建数组并初始化元素</li><li><code>[元素1, 元素2, ...]</code> 创建数组并初始化每一项的值</li></ol><h3 id="数组的本质" tabindex="-1"><a class="header-anchor" href="#数组的本质"><span>数组的本质</span></a></h3><p>数组的本质是一个<strong>对象</strong></p><ul><li>数字字符串属性名：数组的索引（<em>下标</em>），从 <code>0</code> 开始</li><li><code>length</code> 属性：数组的长度；自动更新，值为<strong>最大下标加一</strong></li></ul><details class="hint-container details"><summary>📍 数组示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 10</span></span>
<span class="line"><span style="color:#F6F6F4;">arr[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 5</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">], arr[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">]) </span><span style="color:#7B7F8B;">// 5, 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">arr.abc </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.[</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [ , , ,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">] </span><span style="color:#7B7F8B;">// 属性不存在</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">] </span><span style="color:#7B7F8B;">// 属性存在</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [ , , , , ] </span><span style="color:#7B7F8B;">// 长度为 3</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr5 </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;"> new</span><span style="color:#62E884;"> Array</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 稀疏数组</span></span></code></pre></div></details><div class="hint-container important"><p class="hint-container-title">重要</p><p>通常情况下下标是连续；连续下标的取值范围为 <code>0</code> ~ <code>length - 1</code>；<strong>下标不连续的数组叫做稀疏数组</strong></p><p>如果给 <code>length</code> 属性赋值，会自动调整数组的长度；如果赋值小于当前长度，会截断数组，非数字属性会保留</p></div><h3 id="数组的常用操作" tabindex="-1"><a class="header-anchor" href="#数组的常用操作"><span>数组的常用操作</span></a></h3><h4 id="添加-删除元素" tabindex="-1"><a class="header-anchor" href="#添加-删除元素"><span>添加 / 删除元素</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 向指定下标添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">arr[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 向末尾添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">arr[arr.length] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 向开头添加元素；会导致数组下标向后移动</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">unshift</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">unshift</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 删除属性；不会导致数组其他属性变化，会产生稀松数组</span></span>
<span class="line"><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;"> arr[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 删除最后一项</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">pop</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// 返回被删除的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 删除第一项</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">shift</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// 返回被删除的元素</span></span></code></pre></div><h4 id="splice-操作" tabindex="-1"><a class="header-anchor" href="#splice-操作"><span>splice 操作</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">splice</span><span style="color:#F6F6F4;">(起始下标, 删除个数, 插入元素1, 插入元素2, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><p>从指定下标位置删除多个元素，然后插入数据：</p><ul><li><strong>返回一个新数组，包含被删除的元素；未删除任何元素则返回 <code>undefined</code></strong></li><li>如果下标超过下标范围，则按左右边界处理</li><li>删除个数超过数组长度，则全部删除</li></ul><h4 id="slice-数组切片" tabindex="-1"><a class="header-anchor" href="#slice-数组切片"><span>slice 数组切片</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">(起始下标, 结束下标)</span></span></code></pre></div><p>取出起始下标到结束下标（不包含）的元素，并<strong>返回一个新数组</strong>；不会改变原数组</p><ul><li>下标为负数，则从末尾开始计算</li><li>不指定结束下标，则默认取到数组末尾</li></ul><h4 id="数组查找" tabindex="-1"><a class="header-anchor" href="#数组查找"><span>数组查找</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(元素)</span></span></code></pre></div><p>返回数组中指定元素的第一个下标（严格相等）；如果不存在，则返回 <code>-1</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">lastIndexOf</span><span style="color:#F6F6F4;">(元素)</span></span></code></pre></div><p>返回数组中指定元素的最后一个下标（严格相等）；如果不存在，则返回 <code>-1</code></p><blockquote><p>无法使用 <code>indexOf</code> / <code>lastIndexOf</code> 查找对象，因为是严格相等</p></blockquote><h4 id="fill-数组填充" tabindex="-1"><a class="header-anchor" href="#fill-数组填充"><span>fill 数组填充</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">fill</span><span style="color:#F6F6F4;">(元素)</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">fill</span><span style="color:#F6F6F4;">(元素, 起始下标, 结束下标)</span></span></code></pre></div><p>将数组的指定下标返回填充（<em>替换</em>）为指定元素：</p><ul><li>不指定下标，则视为全部填充</li><li>不指定结束下标，则默认到数组末尾</li></ul><h4 id="清空数组" tabindex="-1"><a class="header-anchor" href="#清空数组"><span>清空数组</span></a></h4><ol><li><code>arr.length = 0</code></li><li><code>arr.splice(0, arr.length)</code></li></ol><h4 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h4><p>将数字每一项转换为字符串，然后用指定字符拼接：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">分隔符</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><h4 id="数组拼接" tabindex="-1"><a class="header-anchor" href="#数组拼接"><span>数组拼接</span></a></h4><p>向数组末尾拼接另一个数组：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr1.</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(arr2) </span><span style="color:#7B7F8B;">// 返回一个新数组；不会改变原数组</span></span></code></pre></div><h3 id="数组的遍历" tabindex="-1"><a class="header-anchor" href="#数组的遍历"><span>数组的遍历</span></a></h3><p>遍历：输出数组每一项</p><h4 id="for-in-遍历" tabindex="-1"><a class="header-anchor" href="#for-in-遍历"><span><code>for in</code> 遍历</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> arr) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr[i])</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>与普通 <code>for</code> 循环区别于遍历稀松数组时不会遍历到空项</p></div><h3 id="数组的克隆" tabindex="-1"><a class="header-anchor" href="#数组的克隆"><span>数组的克隆</span></a></h3><p>克隆：产生一个全新的对象，包含相同的属性和值</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr1.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// 或 var arr2 = arr1.slice(0)</span></span></code></pre></div><h3 id="二维数组" tabindex="-1"><a class="header-anchor" href="#二维数组"><span>二维数组</span></a></h3><p>数组的每一项都是一个数组</p><details class="hint-container details"><summary>📍 输出二位数组所有项</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr[i].length; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr[i][j])</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><h3 id="数组的应用" tabindex="-1"><a class="header-anchor" href="#数组的应用"><span>数组的应用</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr1 </span><span style="color:#7B7F8B;">// 数组的本质是对象，对象存放的是地址</span></span>
<span class="line"><span style="color:#F6F6F4;">arr2[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 10</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr1) </span><span style="color:#7B7F8B;">// [10, 2, 3]</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr2) </span><span style="color:#7B7F8B;">// [10, 2, 3]</span></span></code></pre></div><details class="hint-container details"><summary>📝 练习：斐波那契数组</summary><p>生成给定长度的斐波那契数组</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;"> +</span><span style="color:#62E884;">prompt</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">请输入斐波那契数组长度：</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">isNaN</span><span style="color:#F6F6F4;">(len) </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">&lt;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#62E884;">  alert</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">请输入正整数！</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> []</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> len; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    if</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">===</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F286C4;"> ||</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">===</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      arr[i] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      arr[i] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[i </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> arr[i </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><details class="hint-container details"><summary>📝 练习：二维数组对角线元素之和</summary><p>计算 5x5 二维数组的对角线元素之和</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">12</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">14</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">17</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">18</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">19</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">21</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">22</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">24</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sum </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr[i].length; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    if</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> arr.length </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">      if</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">===</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">        continue</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      sum </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> arr[i][j]</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(sum)</span></span></code></pre></div></details><details class="hint-container details"><summary>📝 练习：数组排序</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 1. 冒泡排序</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> i; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    if</span><span style="color:#F6F6F4;"> (arr[j] </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">]) {</span></span>
<span class="line"><span style="color:#F286C4;">      var</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j]</span></span>
<span class="line"><span style="color:#F6F6F4;">      arr[j] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">      arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><details class="hint-container details"><summary>📝 练习：数组统计</summary><p>统计数组中出现次数最多的元素及其出现次数</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> maxCount </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> null</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> maxNum </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  if</span><span style="color:#F6F6F4;"> (count[arr[i]]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    count[arr[i]]</span><span style="color:#F286C4;">++</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    count[arr[i]] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> count) {</span></span>
<span class="line"><span style="color:#F286C4;">  if</span><span style="color:#F6F6F4;"> (count[key] </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> maxNum) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    maxCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> key</span></span>
<span class="line"><span style="color:#F6F6F4;">    maxNum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> count[key]</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>重复代码会导致程序难以维护（<em>修改</em>）；函数主要用于减少重复代码</p><p>定义 / 声明 / 创建函数：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> 函数名</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">参数1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">参数2</span><span style="color:#F6F6F4;">, ...) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 函数体</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> 返回值</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>函数体的代码不会直接运行，必须手动调用函数才能执行其中代码；调用函数：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#62E884;">函数名</span><span style="color:#F6F6F4;">(参数1, 参数2, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><h3 id="函数的声明提升" tabindex="-1"><a class="header-anchor" href="#函数的声明提升"><span>函数的声明提升</span></a></h3><ul><li>通过函数字面量声明的函数（如上）会自动提升到脚本块的顶部</li><li>函数字面量会成为全局对象的属性</li></ul><h4 id="函数内部的变量声明" tabindex="-1"><a class="header-anchor" href="#函数内部的变量声明"><span>函数内部的变量声明</span></a></h4><ul><li>不使用 <code>var</code>: 给全局对象添加属性</li><li>使用 <code>var</code> 声明：变量声明提升到函数体顶部</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> test</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 3</span></span>
<span class="line"><span style="color:#F6F6F4;">  a</span><span style="color:#F286C4;">--</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 5</span></span>
<span class="line"><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) </span><span style="color:#7B7F8B;">// 5</span></span></code></pre></div><h3 id="函数的参数" tabindex="-1"><a class="header-anchor" href="#函数的参数"><span>函数的参数</span></a></h3><p>参数：函数运行的未知条件，由调用者告知</p><blockquote><p>函数声明时定义的参数是形参，调用时传入的参数是实参</p></blockquote><ul><li>参数只在函数体内有效</li><li>如果调用时未传递某个实参，则对应的形参为 <code>undefined</code></li><li>传入引用类型的参数时，传入的是地址</li></ul><h3 id="函数的返回值" tabindex="-1"><a class="header-anchor" href="#函数的返回值"><span>函数的返回值</span></a></h3><p>函数运行后得到的结果</p><p>调用函数时，调用表达式的值就是函数的返回值</p><h4 id="return-关键字" tabindex="-1"><a class="header-anchor" href="#return-关键字"><span><code>return</code> 关键字</span></a></h4><ul><li><code>return</code> 会直接结束函数的执行；下方代码不会执行</li><li><code>return</code> 后不写表达式，则返回 <code>undefined</code></li><li>如果函数没有 <code>return</code>, 则默认在函数体末尾自动返回 <code>undefined</code></li></ul><details class="hint-container details"><summary>📝 练习：判断素数</summary><p>判断一个数是否是素数</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> isPrime</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">num</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  if</span><span style="color:#F6F6F4;"> (num </span><span style="color:#F286C4;">&lt;</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#BF9EEE;"> false</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> num </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    if</span><span style="color:#F6F6F4;"> (num </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">===</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">      return</span><span style="color:#BF9EEE;"> false</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#BF9EEE;"> true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><h4 id="文档注释" tabindex="-1"><a class="header-anchor" href="#文档注释"><span>文档注释</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 函数说明</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#97E1F1;font-style:italic;"> {参数类型}</span><span style="color:#7B7F8B;"> 参数名：参数说明</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@returns</span><span style="color:#97E1F1;font-style:italic;"> {返回值类型}</span><span style="color:#7B7F8B;"> 返回值说明</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span></code></pre></div><details class="hint-container details"><summary>📝 练习：函数练习</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 判断一个数组是否是稀松数组</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#97E1F1;font-style:italic;"> {Array}</span><span style="color:#FFB86C;font-style:italic;"> arr</span><span style="color:#7B7F8B;"> 数组</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#97E1F1;font-style:italic;"> {Boolean}</span><span style="color:#7B7F8B;"> 是否是稀松数组</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> isSparseArray</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">(i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> arr)) {</span></span>
<span class="line"><span style="color:#F286C4;">      return</span><span style="color:#BF9EEE;"> true</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#BF9EEE;"> false</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h3><p>作用域：一块代码区域，一个运行环境<br> 全局作用域：直接在脚本中书写的代码；函数作用域：函数内部的代码</p><ul><li>在全局作用域中声明的变量会被提升到脚本块顶部，并成为全局对象的属性</li><li>在函数作用域中声明的变量，会被提升到函数顶部；不会成为全局对象的属性（<em>不会污染全局变量</em>）</li></ul><blockquote><p>尽量把功能封装在函数中</p></blockquote><h4 id="作用域中的变量使用" tabindex="-1"><a class="header-anchor" href="#作用域中的变量使用"><span>作用域中的变量使用</span></a></h4><ul><li>全局作用域只能使用全局作用域中声明的变量 / 函数</li><li>函数作用域可以使用作用域内部的变量，也可以使用 <em>外部环境</em> 中声明的变量 / 函数 <ul><li>函数内部声明的变量和外部环境冲突时，使用作用域内部的变量</li><li>使用一个内部作用域没有的变量 / 函数时会逐级向上层作用域寻找</li></ul></li><li>函数调用完成后内部环境中的变量会被销毁</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> test</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) </span><span style="color:#7B7F8B;">// a</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(b) </span><span style="color:#7B7F8B;">// b</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(c) </span><span style="color:#7B7F8B;">// Error: c is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">  function</span><span style="color:#62E884;"> inner</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">    var</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">c</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) </span><span style="color:#7B7F8B;">// a</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(b) </span><span style="color:#7B7F8B;">// b</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(c) </span><span style="color:#7B7F8B;">// c</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">  inner</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">()</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当某个函数功能比较复杂，在编写该函数时，可能需要另一些函数辅助完成其功能，而这些辅助函数仅会被该函数使用，则可以将这些辅助函数定义在函数内部</p></div><h4 id="闭包-closure" tabindex="-1"><a class="header-anchor" href="#闭包-closure"><span>闭包 <em>closure</em></span></a></h4><p>闭包：一种现象，内部函数可以使用外部函数环境中的变量 / 函数</p><h3 id="函数表达式" tabindex="-1"><a class="header-anchor" href="#函数表达式"><span>函数表达式</span></a></h3><p>JS 中，函数也是一个数据；函数可以用于任何需要数据的地方；</p><ul><li><code>(function example() {})</code> 返回函数本身</li><li>当函数作为一个表达式时，既不会声明提升也不会成为全局对象的属性</li><li>函数表达式无法通过函数名调用</li></ul><p>由于大部分情况下，函数表达式的函数名无意义，一般可以省略；没有函数名的函数称为<strong>匿名函数</strong></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 函数表达式</span></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个函数，将其赋值给变量</span></span>
<span class="line"><span style="color:#7B7F8B;">// 变量声明提升</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#62E884;"> a</span><span style="color:#F286C4;"> =</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> () {}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 调用该函数</span></span>
<span class="line"><span style="color:#62E884;">a</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 函数字面量</span></span>
<span class="line"><span style="color:#7B7F8B;">// 函数声明提升</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> b</span><span style="color:#F6F6F4;">() {}</span></span></code></pre></div><ul><li><mark>函数是一个引用类型</mark>，赋值时保存的是地址</li><li><code>typeof 函数名</code> 返回值为 <code>&quot;function&quot;</code></li></ul><h4 id="立即执行函数-iife" tabindex="-1"><a class="header-anchor" href="#立即执行函数-iife"><span>立即执行函数 <em>IIFE</em></span></a></h4><blockquote><p>IIFE: Immediately Invoked Function Expression</p></blockquote><p>书写一个函数表达式，然后将其立即调用</p><ol><li><code>(function example() {})()</code></li><li><code>(function example() {}())</code></li></ol><h4 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数"><span>回调函数</span></a></h4><p>将函数作为参数传入，并在合适的时机调用</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> test</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#62E884;">  callback</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> call</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">call</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(call)</span></span></code></pre></div><details class="hint-container details"><summary>📝 练习：回调函数</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 自定义数组排序</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#97E1F1;font-style:italic;"> {Array}</span><span style="color:#FFB86C;font-style:italic;"> arr</span><span style="color:#7B7F8B;"> 数组</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#97E1F1;font-style:italic;"> {Function}</span><span style="color:#FFB86C;font-style:italic;"> compare</span><span style="color:#7B7F8B;"> 比较函数，接收两个参数，返回负数 / 0 / 正数</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@returns</span><span style="color:#97E1F1;font-style:italic;"> {Array}</span><span style="color:#7B7F8B;"> 排序后的数组</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#62E884;"> arrSort</span><span style="color:#F286C4;"> =</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">compareFn</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">compareFn) {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /* 默认比较函数 */</span></span>
<span class="line"><span style="color:#62E884;">    compareFn</span><span style="color:#F286C4;"> =</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">      if</span><span style="color:#F6F6F4;"> (a </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> b) {</span></span>
<span class="line"><span style="color:#F286C4;">        return</span><span style="color:#F286C4;"> -</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">      } </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (a </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> b) {</span></span>
<span class="line"><span style="color:#F286C4;">        return</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">      } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F286C4;">        return</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> i; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">      if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">compareFn</span><span style="color:#F6F6F4;">(arr[j], arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">]) </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">        let</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j]</span></span>
<span class="line"><span style="color:#F6F6F4;">        arr[j] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">        arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#62E884;"> compare</span><span style="color:#F286C4;"> =</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {}</span></span></code></pre></div></details><h3 id="this-关键字" tabindex="-1"><a class="header-anchor" href="#this-关键字"><span><code>this</code> 关键字</span></a></h3><blockquote><p><code>this</code> 无法被赋值</p></blockquote><ol><li>全局作用域中：<code>this</code> 固定指向全局对象（<em><code>window</code></em>）</li><li>在函数作用域中：<code>this</code> 指向取决于调用方式 <ul><li>直接调用函数：<code>this</code> 指向全局对象</li><li>作为对象的属性并调用（<em><code>对象.属性()</code> / <code>对象[属性]()</code></em>）：<code>this</code> 指向该对象</li></ul></li></ol><p><mark><code>this</code> 的指向在函数执行时才能确定</mark></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#62E884;">  a</span><span style="color:#F286C4;">:</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  b</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#62E884;">    c</span><span style="color:#F286C4;">:</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">      console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">obj.</span><span style="color:#62E884;">a</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// obj</span></span>
<span class="line"><span style="color:#F6F6F4;">obj.b.</span><span style="color:#62E884;">c</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// obj.b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj.b.c</span></span>
<span class="line"><span style="color:#62E884;">x</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// window</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> someone </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  firstName</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">John</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  lastName</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">Doe</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#62E884;">  sayName</span><span style="color:#F286C4;">:</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.firstName </span><span style="color:#F286C4;">+</span><span style="color:#DEE492;"> &#39;</span><span style="color:#DEE492;"> &#39;</span><span style="color:#F286C4;"> +</span><span style="color:#BF9EEE;font-style:italic;"> this</span><span style="color:#F6F6F4;">.lastName)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 不能直接使用 someone.firstName 和 someone.lastName：防止该对象被重置</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">someone.</span><span style="color:#62E884;">sayName</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// John Doe</span></span></code></pre></div><blockquote><p>对象中的属性如果是一个函数，也称其为对象的方法</p></blockquote><details class="hint-container details"><summary>📍 使用单对象模式 / 命名空间模式减少全局变量污染</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> myFunctions </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#62E884;">  a</span><span style="color:#F286C4;">:</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#62E884;">  b</span><span style="color:#F286C4;">:</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><blockquote><p>也称构造器</p></blockquote><p>用函数创建对象可以减少繁琐的流程</p><ol><li><p>函数返回一个对象（<em>工厂函数</em>）：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> createPerson</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    name,</span></span>
<span class="line"><span style="color:#F6F6F4;">    age,</span></span>
<span class="line"><span style="color:#62E884;">    sayName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">      console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name)</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> person </span><span style="color:#F286C4;">=</span><span style="color:#62E884;"> createPerson</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">John</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">)</span></span></code></pre></div></li><li><p>构造函数：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> 函数</span><span style="color:#F6F6F4;">(参数1, 参数2, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">)</span></span></code></pre></div></li></ol><p>使用 <code>new</code> 关键字调用函数创建对象，则该函数为构造函数</p><ul><li>构造函数专用于创建对象</li><li>构造函数通常使用大驼峰命名</li></ul><p><mark>构造函数内部会自动创建一个新对象，<code>this</code> 自动指向新建对象，并自动返回该对象</mark></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> Person</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> p1 </span><span style="color:#F286C4;">=</span><span style="color:#62E884;"> Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">John</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// undefined</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> p2 </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;"> new</span><span style="color:#62E884;"> Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">John</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> User</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#BF9EEE;font-style:italic;">  this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name</span></span>
<span class="line"><span style="color:#BF9EEE;font-style:italic;">  this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> age</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> u1 </span><span style="color:#F286C4;">=</span><span style="color:#62E884;"> User</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">John</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// { name: &#39;John&#39;, age: 25}</span></span></code></pre></div><p>构造函数中如果出现返回值：</p><ul><li>如果返回原始类型，则直接忽略</li><li>如果返回引用类型，则使用该返回值</li></ul><p>所有的对象本质都是通过构造函数创建的：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">] </span><span style="color:#7B7F8B;">// 语法糖 new Array(1, 2, 3)</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { a</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">, b</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;"> } </span><span style="color:#7B7F8B;">// 语法糖 new Object({ a: 1, b: 2 })</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> createPerson</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    name,</span></span>
<span class="line"><span style="color:#F6F6F4;">    age,</span></span>
<span class="line"><span style="color:#62E884;">    sayName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">      console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name)</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#7B7F8B;">// 语法糖，返回构造函数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h4 id="new-target" tabindex="-1"><a class="header-anchor" href="#new-target"><span><code>new.target</code></span></a></h4><p><code>new.target</code>: 该表达式在函数中使用，返回当前构造函数</p><p>通常用于判断该函数是否使用 <code>new</code> 调用；如果该函数不是通过 <code>new</code> 调用，则返回 <code>undefined</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> User</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;">.target </span><span style="color:#F286C4;">===</span><span style="color:#BF9EEE;"> undefined</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#F286C4;font-weight:bold;"> new</span><span style="color:#62E884;"> User</span><span style="color:#F6F6F4;">(name, age)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#BF9EEE;font-style:italic;">  this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name</span></span>
<span class="line"><span style="color:#BF9EEE;font-style:italic;">  this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> age</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div>`,135)),n(" TODO: 英雄打怪游戏(构造函数) "),s[5]||(s[5]=a(`<h3 id="函数的本质" tabindex="-1"><a class="header-anchor" href="#函数的本质"><span>函数的本质</span></a></h3><p>函数的本质就是对象</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sum </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;"> new</span><span style="color:#62E884;"> Function</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">return a + b</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">sum</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// 3</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> sum) </span><span style="color:#7B7F8B;">// &#39;function&#39;</span></span></code></pre></div><p>所有的函数都是通过 <code>new Function()</code> 创建的</p><ul><li><code>Function</code> 构造函数由浏览器提供</li><li><code>Function</code> --&gt; 产生函数对象 --&gt; 产生普通对象</li></ul><p>由于函数本身是一个对象，所以函数可以拥有属性</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> Number) </span><span style="color:#7B7F8B;">// &#39;function&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> Number.isNaN) </span><span style="color:#7B7F8B;">// &#39;function&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Number.MAX_SAFE_INTEGER) </span><span style="color:#7B7F8B;">// 2^53 - 1</span></span></code></pre></div><h4 id="包装类" tabindex="-1"><a class="header-anchor" href="#包装类"><span>包装类</span></a></h4><p>JS 为了增强原始类型的功能，为 <code>boolean</code>、<code>string</code>、<code>number</code> 专门创建了构造函数</p><p>如果语法上将原始类型当作对象使用时（<em>一般在使用属性时</em>），JS 会自动在该位置利用对应的构造函数，创建一个对象来访问该原始类型的该属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 3.1415</span></span>
<span class="line"><span style="color:#F6F6F4;">a.</span><span style="color:#62E884;">toFixed</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)(</span></span>
<span class="line"><span style="color:#7B7F8B;">  // &#39;3.14&#39;</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">  new</span><span style="color:#62E884;"> Number</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3.1415</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">toFixed</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &#39;3.14&#39;</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 123</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;"> new</span><span style="color:#62E884;"> Number</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> y) </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> y) </span><span style="color:#7B7F8B;">// false // 类型不同</span></span></code></pre></div><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li>在 JS 中，可以认为构造函数就是类，创建的对象就是实例</li><li>成员方法（属性） / 实例方法（属性）：通过构造函数创建的对象上的方法（属性）</li><li>类方法（属性） / 静态方法（属性）：通过构造函数本身调用的方法（属性）</li></ul></div><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h3><p>函数内部直接或间接调用自身</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 求斐波那契数列第 n 项</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> f</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  if</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">===</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> ||</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">===</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#62E884;"> f</span><span style="color:#F6F6F4;">(n </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">+</span><span style="color:#62E884;"> f</span><span style="color:#F6F6F4;">(n </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h4 id="执行栈-call-stack" tabindex="-1"><a class="header-anchor" href="#执行栈-call-stack"><span>执行栈 <em>call stack</em></span></a></h4><p>无论任何代码的执行，都必须有一个执行环境，执行环境为代码执行提供支持；执行环境全部放在执行栈中。</p><p>每个函数的调用都需要创建一个函数执行环境，函数调用结束，该执行环境就会被销毁</p>`,19)),c("details",y,[s[0]||(s[0]=a(`<summary>📍 JS 执行栈</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> a</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a start</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#62E884;">  b</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a end</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> b</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">b start</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">b end</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">start</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#62E884;">a</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">end</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span></code></pre></div>`,2)),o(l,{code:"eJyFkk0OgyAQRveegrDShSb+tJqm8RIsiQtEilYqVu39i5KoSadhA98s3pswQ60078NaLMxDaCtuJDYRIa7V5zXMyFaMYql0zRSuTC2GxpzzyLg4sATAOMVcD7NWIlJa+sFGG8JtSwFb48YyAHtQzPbWwu24AI4Ofkh7VktAzaYpvlMcRRGuSn/qZLsER6cr0ElRXO/K/ux/wv7kvz8H/CP8Eu2eSwHY3j+YuUiMwrBE248gic3rPklq87okktm8DpvkNhfeF3EPq+Y="})]),s[6]||(s[6]=a(`<div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// n 的阶乘</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> f</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  if</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">===</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">*</span><span style="color:#62E884;"> f</span><span style="color:#F6F6F4;">(n </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p><strong>递归使用时要避免无限递归（<em>没有终止条件</em>）</strong></p><p>执行栈有相对固定的大小，如果执行环境太多，执行栈无法容纳，会报错：<code>Maximum call stack size exceeded</code>（<em>栈溢出</em>）</p><div class="hint-container tip"><p class="hint-container-title">对比无限循环</p><p>死循环不会报错，也不会导致栈溢出（<em>只有一个执行环境</em>）</p></div><details class="hint-container details"><summary>📚 尾调用</summary><p>如果一个函数最后一条语句是调用函数，且最后一条语句表达式仅由调用函数组成，则称该语句为<strong>尾调用</strong>；如果尾调用是调用函数自身，则称为<strong>尾递归</strong></p><p>某些语言或执行环境会对尾调用进行优化：会立即销毁当前函数的执行环境，避免执行栈空间被占用。</p><p>在浏览器环境中均未实现尾调用优化（<em>由于调试、性能分析、栈追踪等开发体验问题，暂无计划</em>）；但 node 环境中可以使用</p></details><h3 id="arguments-关键字" tabindex="-1"><a class="header-anchor" href="#arguments-关键字"><span><code>arguments</code> 关键字</span></a></h3><p><code>arguments</code> 关键字：表示函数调用时传入的所有参数（<em>实参</em>）组成的<strong>类数组</strong>（<em>伪数组</em>）</p><ul><li>可以取到未定义但传入的多余参数</li><li><code>arguments</code> 的值会与对应的形参绑定，但未传的参数不会映射</li></ul><blockquote><p>伪数组：没有通过 <code>Array</code> 构造器创建的类似数组的结构，缺少很多数组的实例方法</p></blockquote><h2 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库"><span>标准库</span></a></h2><p>标准库也称标准 API<br> 标准：ECMA 标准</p><p>库：<em>library</em>，一组预先编写好的代码，可以直接使用，无需自己编写<br> API：<em>Application Programming Interface</em>，应用程序编程接口</p><h3 id="object-构造函数" tabindex="-1"><a class="header-anchor" href="#object-构造函数"><span><code>Object</code> 构造函数</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> Object</span><span style="color:#F6F6F4;">(value)</span></span>
<span class="line"><span style="color:#62E884;">Object</span><span style="color:#F6F6F4;">(value)</span></span></code></pre></div><p><code>Object()</code> 构造函数将输入转换为一个对象</p><ul><li><p>如果该值是 <code>null</code> 或者 <code>undefined</code>，它会生成并返回一个空对象</p></li><li><p>如果该值已经是一个对象，则返回该值</p></li><li><p>否则，返回与给定值对应的类型的对象</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;"> new</span><span style="color:#62E884;"> Object</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// new Number(123)</span></span></code></pre></div></li></ul><h4 id="object-的静态成员" tabindex="-1"><a class="header-anchor" href="#object-的静态成员"><span><code>Object</code> 的静态成员</span></a></h4><p>属性：</p><ul><li><code>Object.length</code> 固定为 <code>1</code>，表示参数个数</li></ul><p>方法：</p><ol><li><p><code>Object.keys(obj)</code></p><ul><li>参数 <code>obj</code> 是一个对象</li><li>返回给定对象自身可枚举的属性名（<em>键</em>）组成的字符串数组</li></ul></li><li><p><code>Object.values(obj)</code></p><ul><li>参数 <code>obj</code> 是一个对象</li><li>返回给定对象自有可枚举键的值组成的数组</li></ul></li><li><p><code>Object.entries(obj)</code></p><ul><li>参数 <code>obj</code> 是一个对象</li><li>返回一个数组，数组的每一项是一个 <code>[key, value]</code> 数组，表示对象自身可枚举的键值对</li></ul></li></ol><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { a</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">, b</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">, c</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Object.</span><span style="color:#62E884;">keys</span><span style="color:#F6F6F4;">(obj)) </span><span style="color:#7B7F8B;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Object.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">(obj)) </span><span style="color:#7B7F8B;">// [1, 2, 3]</span></span></code></pre></div><h4 id="object-的实例成员" tabindex="-1"><a class="header-anchor" href="#object-的实例成员"><span><code>Object</code> 的实例成员</span></a></h4><p>只要是对象，都有 <code>Object</code> 的实例成员</p><ol><li><p><code>Object.prototype.toString()</code> 返回该对象的字符串</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { a</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">, b</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">, c</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">()) </span><span style="color:#7B7F8B;">// [object Object]</span></span></code></pre></div><p>默认情况下，对象的 <code>toString()</code> 方法返回 <code>[object Object]</code>；<strong>但实例成员可以被重写</strong>，如数组的 <code>toString()</code> 方法</p></li><li><p><code>Object.prototype.valueOf()</code> 返回对象的值；默认情况下，返回对象本身</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { a</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">, b</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">, c</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj.</span><span style="color:#62E884;">valueOf</span><span style="color:#F6F6F4;">()) </span><span style="color:#7B7F8B;">// { a: 1, b: 2, c: 3 }</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj.</span><span style="color:#62E884;">valueOf</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> obj) </span><span style="color:#7B7F8B;">// true</span></span></code></pre></div></li></ol><div class="hint-container important"><p class="hint-container-title">重要</p><p>在 JS 中，当自动进行类型转换时，如果转换的是一个对象，实际上会先调用对象的 <code>valueOf()</code> 方法，然后调用返回结果的 <code>toString()</code> 方法，然后将得到的结果进行进一步转换。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  a</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  b</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  c</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#62E884;">  toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &#39;hello1&#39;</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  a</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  b</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  c</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#62E884;">  valueOf</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#BF9EEE;"> 123</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 124</span></span></code></pre></div><p><mark>如果调用 <code>valueOf()</code> 已经得到原始类型的值，则不会再调用 <code>toString()</code> 方法</mark></p></div><h3 id="function-构造函数" tabindex="-1"><a class="header-anchor" href="#function-构造函数"><span><code>Function</code> 构造函数</span></a></h3><h4 id="function-的实例成员" tabindex="-1"><a class="header-anchor" href="#function-的实例成员"><span><code>Function</code> 的实例成员</span></a></h4><p>所有函数都具有 <code>Function</code> 的实例成员</p><p>属性：</p><ul><li><code>Function.length</code> 函数形参的个数</li><li><code>Function.name</code> 函数名</li></ul><p>方法：</p><ul><li><p><code>Function.prototype.apply(thisArg, argsArray)</code> 调用函数同时指定该函数的 <code>this</code> 指向</p><ul><li><code>thisArg</code> 参数：需要绑定的 <code>this</code> 指向</li><li><code>argsArray</code> 调用函数的参数数组</li></ul></li><li><p><code>Function.prototype.call(thisArg, ...args)</code> 调用函数同时指定该函数的 <code>this</code> 指向</p><ul><li><code>thisArg</code> 参数：需要绑定的 <code>this</code> 指向</li><li><code>...args</code> 参数：调用函数的参数列表</li></ul></li><li><p><code>Function.prototype.bind(thisArg, ...args)</code> 返回一个同样的新函数，绑定该函数的 <code>this</code> 指向，适用于多次调用</p></li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> sayHello</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> usr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">John</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">sayHello.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(usr, [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]) </span><span style="color:#7B7F8B;">// John hello</span></span>
<span class="line"><span style="color:#F6F6F4;">sayHello.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(usr, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><p>通常可以利用 <code>apply()</code> 或 <code>call()</code> 方法，将某个伪数组转为真数组</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> toArr</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 伪数组转真数组</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [].slice.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">toArr</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><ul><li><code>Function.prototype.toString()</code> 获取函数实现源码的字符串（<em>覆盖了 <code>Object.prototype.toString()</code></em>）</li></ul><h3 id="array-构造函数" tabindex="-1"><a class="header-anchor" href="#array-构造函数"><span><code>Array</code> 构造函数</span></a></h3><p>所有通过 <code>Array</code> 构造器创建的对象都是数组</p><h4 id="array-的静态成员" tabindex="-1"><a class="header-anchor" href="#array-的静态成员"><span><code>Array</code> 的静态成员</span></a></h4><p>属性：</p><ul><li><p><code>Array.from()</code> 将一个伪数组转换为真数组</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> toArr</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> Array.</span><span style="color:#62E884;">from</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">toArr</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// [1, 2, 3]</span></span></code></pre></div></li><li><p><code>Array.isArray()</code> 判断一个值是否为数组</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">function</span><span style="color:#62E884;"> toArr</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> Array.</span><span style="color:#62E884;">isArray</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">toArr</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// false</span></span></code></pre></div></li><li><p><code>Array.of()</code> 根据参数创建一个数组</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">Array.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#F6F6F4;">Array.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// [3]</span></span></code></pre></div></li></ul><h4 id="array-的实例成员" tabindex="-1"><a class="header-anchor" href="#array-的实例成员"><span><code>Array</code> 的实例成员</span></a></h4><p>方法：<a href="#%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C">见</a></p><ul><li><p><code>Array.prototype.fill()</code></p></li><li><p><code>Array.prototype.pop()</code></p></li><li><p><code>Array.prototype.push()</code></p></li><li><p><code>Array.prototype.reverse()</code> 对数组进行反序并返回</p></li><li><p><code>Array.prototype.shift()</code></p></li><li><p><code>Array.prototype.unshift()</code></p></li><li><p><code>Array.prototype.splice()</code></p></li><li><p><code>Array.prototype.sort()</code> 对数组进行排序并返回</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr1.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">211</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">22</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">12</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">111</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr2.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// [11, 111, 12, 211, 22]</span></span></code></pre></div><p><strong>默认按照字符串的 Unicode 编码进行排序</strong></p><p><code>Array.prototype.sort(compareFunction)</code> 可以传入比较函数</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> b</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 随机排序 / 乱序</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;"> 0.5</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span></code></pre></div></li></ul><blockquote><p>纯函数 / 无副作用函数不会导致当前对象发生改变</p></blockquote><ul><li><p><code>Array.prototype.concat()</code></p></li><li><p><code>Array.prototype.includes()</code> 判断数组是否包含满足条件的值（<em>严格相等</em>）</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr.</span><span style="color:#62E884;">includes</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#7B7F8B;">// 从下标 3 开始查找</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr.</span><span style="color:#62E884;">includes</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// false</span></span></code></pre></div></li><li><p><code>Array.prototype.join()</code></p></li><li><p><code>Array.prototype.slice()</code></p></li><li><p><code>Array.prototype.toString()</code></p></li><li><p><code>Array.prototype.indexOf()</code></p></li><li><p><code>Array.prototype.lastIndexOf()</code></p></li><li><p><code>Array.prototype.forEach()</code> 遍历数组</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(item, index, arr)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span></code></pre></div></li><li><p><code>Array.prototype.every()</code> 判断是否所有元素都满足条件</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">every</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">&lt;</span><span style="color:#BF9EEE;"> 6</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// true</span></span></code></pre></div></li><li><p><code>Array.prototype.some()</code> 判断数组中至少有一个元素满足条件</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">some</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 4</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// true</span></span></code></pre></div></li><li><p><code>Array.prototype.filter()</code> 返回一个新数组，包含所有满足条件的元素</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 4</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// [5]</span></span></code></pre></div></li><li><p><code>Array.prototype.find()</code> 返回第一个满足条件的元素，如果没有返回 <code>undefined</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 4</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// 5</span></span></code></pre></div></li><li><p><code>Array.prototype.findIndex()</code> 返回第一个满足条件的元素的下标，如果没有返回 <code>-1</code></p></li><li><p><code>Array.prototype.map()</code> 将数组的每一项映射为一个新值，返回一个新数组</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;"> 2</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// [2, 4, 6, 8, 10]</span></span></code></pre></div></li><li><p><code>Array.prototype.reduce()</code> 对数组中的每个元素按序执行一个提供的函数，每一次运行会将先前元素的计算结果作为参数传入，返回最后的结果</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// 15</span></span>
<span class="line"><span style="color:#7B7F8B;">// 指定初始值</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b</span></span>
<span class="line"><span style="color:#F6F6F4;">}, </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// 不会运行回调函数，直接返回数组的第一个元素</span></span></code></pre></div></li></ul><details class="hint-container details"><summary>📍 链式编程</summary><p>链式编程：每一个函数调用返回的类型一致</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr</span></span>
<span class="line"><span style="color:#F6F6F4;">  .</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;"> 2</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">  .</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 4</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span></code></pre></div></details><h3 id="原始类型包装器" tabindex="-1"><a class="header-anchor" href="#原始类型包装器"><span>原始类型包装器</span></a></h3><ul><li><code>new 包装器(value)</code> 返回一个包装器对象，包装了原始类型的值</li><li><code>包装器(value)</code> 返回一个原始类型</li></ul><h4 id="number-构造函数" tabindex="-1"><a class="header-anchor" href="#number-构造函数"><span><code>Number</code> 构造函数</span></a></h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number#number_%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener noreferrer"><code>number</code> 强制转换</a></p></blockquote><p>静态成员：</p><ul><li><code>Number.isNaN()</code> 全局 <code>isNaN()</code> 的更健壮版本：不会尝试将参数转换为数字，因此非数字总是返回 <code>false</code></li><li><code>Number.isInteger(value)</code> 判断传入的值是否为整数（<em>只要值是整数，无论是整数型还是浮点数型</em>）</li><li><code>Number.parseInt(string)</code> 将数据进行强制字符串转换再转换为整数，直接舍去小数（<em>与全局 <code>parseInt()</code> 完全相同</em>） <ul><li><code>radix</code> 参数（<em>可选</em>）：指定进制，默认 <code>10</code></li></ul></li><li><code>Number.parseFloat(string)</code> 数据数据进行强制字符串转换再转换为浮点数（<em>与全局 <code>parseFloat()</code> 完全相同</em>）</li></ul><details class="hint-container details"><summary>📍 Number 静态成员示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3.6</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 3</span></span>
<span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">333</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// NaN</span></span>
<span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">103</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1.111</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseFloat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 3.000</span></span>
<span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseFloat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">   3.14</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 3.14</span></span>
<span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseFloat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">3.14abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 3.14</span></span>
<span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseFloat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">abc3.14</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// NaN</span></span>
<span class="line"><span style="color:#F6F6F4;">Number.</span><span style="color:#62E884;">parseFloat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">3.14.56</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 3.14</span></span></code></pre></div></details><blockquote><p>从字符串开始位置进行查找，找到第一个<strong>有效数字</strong>进行转换，如果没有找到，返回 <code>NaN</code></p></blockquote>`,56)),n(" TODO: 得到最小值和最大值之间的随机整数 "),s[7]||(s[7]=a(`<p>实例成员：</p><ul><li><code>Number.prototype.toFixed(num)</code> 返回数字指定小数位数的字符串，会有四舍五入</li><li><code>Number.prototype.toPrecision(num)</code> 返回数字的指定精度（<em>有效数字</em>）的字符串，会有四舍五入</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> num </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 123.456</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(num.</span><span style="color:#62E884;">toFixed</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// &quot;123.46&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(num.</span><span style="color:#62E884;">toPrecision</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// 123</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(num.</span><span style="color:#62E884;">toPrecision</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// &quot;1.2e+2&quot; // 科学计数法 e 表示 10 的幂</span></span></code></pre></div><h4 id="boolean-构造函数" tabindex="-1"><a class="header-anchor" href="#boolean-构造函数"><span><code>Boolean</code> 构造函数</span></a></h4><p>实例成员：</p><ul><li><code>Boolean.prototype.toString()</code> 返回布尔值的字符串表示</li></ul><h4 id="string-构造函数" tabindex="-1"><a class="header-anchor" href="#string-构造函数"><span><code>String</code> 构造函数</span></a></h4><p>静态成员：</p><ul><li><p><code>String.fromCharCode()</code> 通过 Unicode 编码创建字符串（<em>超出编码范围会截断但不会报错</em>）</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F6F6F4;">String.</span><span style="color:#62E884;">fromCharCode</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">65</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">66</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &quot;AB&quot;</span></span></code></pre></div></li><li><p><code>String.fromCodePoint()</code> 通过 Unicode 码点（<em>有效编码</em>）创建字符串</p></li></ul><p>实例成员：</p><ul><li><code>String.prototype.length</code> 返回字符串的长度</li><li><code>String.prototype.charAt(index)</code> 返回指定索引处的字符，超出索引返回空字符串</li><li><code>String.prototype.charCodeAt(index)</code> 返回指定索引处的 Unicode 码点，超出索引返回 <code>NaN</code></li><li><code>String.prototype.concat()</code> 连接多个字符串，返回一个连接后的新字符串</li><li><code>String.prototype.includes()</code> 判断字符串是否包含指定字符串</li><li><code>String.prototype.endsWith()</code> 判断字符串是否以指定字符串结尾</li><li><code>String.prototype.startsWith()</code> 判断字符串是否以指定字符串开头</li><li><code>String.prototype.indexOf()</code> 返回指定字符串第一次出现的索引，不存在返回 <code>-1</code></li><li><code>String.prototype.lastIndexOf()</code> 返回指定字符串最后一次出现的索引，不存在返回 <code>-1</code></li><li><code>String.prototype.padEnd(length, str)</code> 以指定字符填充字符串的末尾以达到指定长度，返回填充后的新字符串</li><li><code>String.prototype.padStart(length, str)</code> 以指定字符填充字符串的开头以达到指定长度，返回填充后的新字符串</li><li><code>String.prototype.repeat(num)</code> 返回字符串重复指定次数的新字符串</li><li><code>String.prototype.slice()</code> 返回指定<strong>指定索引开始到指定索引结束</strong>的子字符串，与数组的 <code>slice()</code> 方法类似；<strong>索引可以为负数</strong></li><li><code>String.prototype.substr(start, length)</code> 返回从指定索引开始的<strong>指定长度</strong>的子字符串；<strong>索引可以为负数</strong></li><li><code>String.prototype.substring(index1, index2)</code> 返回从<strong>指定索引开始到指定索引结束</strong>的子字符串； <ul><li><strong>索引不能为负数</strong>，负数索引会被自动转换为 <code>0</code></li><li><strong>参数顺序可以调换</strong></li></ul></li><li><code>String.prototype.toLowerCase()</code> 返回字符串的小写版本</li><li><code>String.prototype.toUpperCase()</code> 返回字符串的大写版本</li><li><code>String.prototype.trim()</code> 返回字符串去除首尾空白字符的新字符串</li><li><code>String.prototype.split(separator)</code> 返回一个由指定分隔符分割的字符串数组</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字符串是一个伪数组：有 <code>length</code> 属性，且可以通过索引访问字符串中的字符</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">Array.</span><span style="color:#62E884;">from</span><span style="color:#F6F6F4;">(str) </span><span style="color:#7B7F8B;">// [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span></code></pre></div></div><details class="hint-container details"><summary>📍 String 实例成员示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.length) </span><span style="color:#7B7F8B;">// 5</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">charAt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// &quot;l&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">charCodeAt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// 108</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#DEE492;"> &#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// &quot;hello world&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">includes</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">endsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">o</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">lastIndexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// 3</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">padEnd</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">-</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// &quot;hello-----&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">padStart</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">abcd</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// &quot;abcdahello&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// &quot;hellohellohello&quot;</span></span></code></pre></div></details><blockquote><p>字符串字面量可以直接使用实例方法</p></blockquote><h3 id="math-对象" tabindex="-1"><a class="header-anchor" href="#math-对象"><span><code>Math</code> 对象</span></a></h3><blockquote><p><code>Math</code> 是一个对象，不是构造函数</p></blockquote><ul><li><code>Math.random()</code> 得到一个大于等于 <code>0</code> 且小于 <code>1</code> 的随机数</li><li><code>Math.PI</code> 返回圆周率</li><li><code>Math.abs(x)</code> 返回 <code>x</code> 的绝对值</li><li><code>Math.floor(x)</code> 将 <code>x</code> 向下取整</li><li><code>Math.ceil(x)</code> 将 <code>x</code> 向上取整</li><li><code>Math.max(x, y, ...)</code> 得到一组数据的最大值，如果没有参数，返回 <code>-Infinity</code></li><li><code>Math.min(x, y, ...)</code> 得到一组数据的最小值，如果没有参数，返回 <code>Infinity</code></li><li><code>Math.pow(x, y)</code> 返回 <code>x</code> 的 <code>y</code> 次方</li><li><code>Math.round(x)</code> 将 <code>x</code> 四舍五入为整数，负数向数轴的正方向五入</li></ul><h3 id="date-构造函数" tabindex="-1"><a class="header-anchor" href="#date-构造函数"><span><code>Date</code> 构造函数</span></a></h3><blockquote><p>GMT（<em>Greenwich Mean Time</em>）格林威治世界时，太阳时，精确到毫秒<br> UTC（<em>Universal Time Coordinated</em>）世界协调时，原子时，精确到纳秒<br> UTC 时间与 GMT 时间误差不超过 0.9 秒</p></blockquote><p>时间戳：<code>1970-01-01 00:00:00 UTC</code> 到某个时间的毫秒数</p><h4 id="创建事件对象" tabindex="-1"><a class="header-anchor" href="#创建事件对象"><span>创建事件对象</span></a></h4><blockquote><p>不使用构造函数，直接调用 <code>Date()</code>， 会忽略所有参数，直接返回当前时间的字符串</p></blockquote><p><code>new Date()</code> 创建日期兑现</p><ul><li>无参数：返回当前时间的对象</li><li>单个参数，为数字：传入时间戳，返回对应的日期对象</li><li>多个参数，分别为年、月、日、时、分、秒、毫秒：返回对应的日期对象 <ul><li>月份从 <code>0</code> 开始</li><li>日、时、分、秒、毫秒可以省略，默认 <code>0</code></li><li>可以传负数，会根据指定日期进行计算</li></ul></li></ul><h4 id="日期对象实例成员" tabindex="-1"><a class="header-anchor" href="#日期对象实例成员"><span>日期对象实例成员</span></a></h4><ul><li><code>Date.prototype.getDate()</code> 返回日期对象对应的日期，<code>1</code> ~ <code>31</code></li><li><code>Date.prototype.getUTCDate()</code> 返回日期对象对应的日期（<em>UTC 时间</em>）</li><li><code>Date.prototype.getDay()</code> 返回日期对象对应的星期几，<code>0</code> ~ <code>6</code>，<code>0</code> 为星期日</li><li><code>Date.prototype.getFullYear()</code> 返回日期对象对应的(完整)年份</li><li><code>Date.prototype.getMonth()</code> 返回日期对象对应的月份，<code>0</code> ~ <code>11</code></li><li><code>Date.prototype.getHour()</code> 返回日期对象对应的小时，<code>0</code> ~ <code>23</code></li><li><code>Date.prototype.Minute()</code> 返回日期对象对应的分钟，<code>0</code> ~ <code>59</code></li><li><code>Date.prototype.getSeconds()</code> 返回日期对象对应的秒，<code>0</code> ~ <code>59</code></li><li><code>Date.prototype.getMilliseconds()</code> 返回日期对象对应的毫秒，<code>0</code> ~ <code>999</code></li><li><code>Date.prototype.getTime()</code> 返回日期对象对应的时间戳</li><li><code>Date.prototype.setDate(date)</code> 设置日期对象对应的日期</li><li><code>Date.prototype.setDay(day)</code> 设置日期对象对应的星期几</li><li><code>Date.prototype.setMonth(month)</code> 设置日期对象对应的月份</li><li><code>Date.prototype.setFullYear(year)</code> 设置日期对象对应的年份</li><li><code>Date.prototype.setHours(hour)</code> 设置日期对象对应的小时</li><li><code>Date.prototype.setMinutes(minute)</code> 设置日期对象对应的分钟</li><li><code>Date.prototype.setSeconds(second)</code> 设置日期对象对应的秒</li><li><code>Date.prototype.setMilliseconds(millisecond)</code> 设置日期对象对应的毫秒</li><li><code>Date.prototype.setTime(timestamp)</code> 设置日期对象对应的时间戳</li><li><code>Date.prototype.toDateString()</code> 返回日期对象对应的日期字符串，<code>Tue Jun 18 2019</code></li><li><code>Date.prototype.toISOString()</code> 返回日期对象对应的 ISO 标准格式字符串，<code>yyyy-mm-ddTHH:MM:SS.sssZ</code></li><li><code>Date.prototype.toLocaleDateString()</code> 根据系统时区，返回日期对象对应的本地日期字符串，<code>yyyy/mm/dd</code></li><li><code>Date.prototype.toLocaleString()</code> 根据系统时区，返回日期对象对应的本地日期时间字符串，<code>yyyy/mm/dd 上午HH:MM:SS</code></li><li><code>Date.prototype.toLocaleTimeString()</code> 根据系统时区，返回日期对象对应的本地时间字符串，<code>下午HH:MM:SS</code></li><li><code>Date.prototype.toUTCString()</code> 返回日期对象对应的 UTC 标准格式字符串，<code>Tue, 18 Jun 2019 08:00:00 GMT</code></li><li><code>Date.prototype.toString()</code> 返回日期对象对应的字符串，根据系统时区，<code>Tue Jun 18 2019 08:00:00 GMT+0800 (中国标准时间)</code></li></ul><h4 id="日期运算" tabindex="-1"><a class="header-anchor" href="#日期运算"><span>日期运算</span></a></h4><p>日期对象重写了 <code>Object</code> 对象的 <code>valueOf()</code> 方法，返回日期对象对应的时间戳数字；<br> 因此日期对象可以进行运算</p>`,28)),n(" TODO: 根据当天月份输出本月每天的星期 "),s[8]||(s[8]=a(`<h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><p>一个规则，用于验证字符串</p><h3 id="基础规则" tabindex="-1"><a class="header-anchor" href="#基础规则"><span>基础规则</span></a></h3><ol><li><p>字面量匹配：规则中直接书写字面量</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#E7EE98;">abc</span><span style="color:#EE6666;">/</span><span style="color:#7B7F8B;"> // 匹配 &quot;abc&quot;</span></span></code></pre></div></li><li><p>特殊字符：</p><ul><li><code>.</code> 匹配除了换行符外任意字符</li><li><code>^</code> 匹配字符串的开始</li><li><code>$</code> 匹配字符串的结束</li></ul></li><li><p>转义符：</p><ul><li><code>\\</code> 将特殊字符转义，匹配该字符本身</li><li><code>\\n</code> 匹配换行符</li><li><code>\\t</code> 匹配制表符</li><li><code>\\s</code> 匹配空白字符（<em>包括空格、制表符、换行符等</em>）；<code>\\S</code> 匹配非空白字符</li><li><code>\\b</code> 匹配单词边界；<code>\\B</code> 匹配非单词边界</li><li><code>\\d</code> 匹配一个数字；<code>\\D</code> 匹配一个非数字</li><li><code>\\w</code> 匹配一个字母、数字或下划线；<code>\\W</code> 匹配一个非字母、数字或下划线</li><li><code>\\u</code> 匹配 Unicode 字符</li></ul></li><li><p>字符集： <code>[]</code> 匹配指定范围内的字符</p><ul><li><code>[a-z]</code> 匹配小写字母</li><li><code>[A-Z]</code> 匹配大写字母</li><li><code>[0-9]</code> 匹配数字，相当于 <code>\\d</code></li><li><code>[\\u4e00-\\u9fa5]</code> 匹配中文字符</li><li><code>[^]</code> 对字符集取反，匹配不在字符集内的字符</li></ul></li><li><p>量词：前面的规则出现的次数</p><ul><li><code>*</code> 匹配前面的规则零次或多次</li><li><code>+</code> 匹配前面的规则一次或多次</li><li><code>?</code> 匹配前面的规则零次或一次</li><li><code>{n}</code> 匹配前面的规则 <code>n</code> 次</li><li><code>{n,}</code> 匹配前面的规则 <code>n</code> 次或更多次</li><li><code>{n,m}</code> 匹配前面的规则 <code>n</code> 次到 <code>m</code> 次</li></ul></li><li><p>或者：<code>|</code> 多个匹配规则中的任意一个</p></li><li><p>括号：<code>()</code> 用于分组</p></li></ol><h3 id="js-中的正则表达式" tabindex="-1"><a class="header-anchor" href="#js-中的正则表达式"><span>JS 中的正则表达式</span></a></h3><p>JS 中正则表达式表现为一个对象；该对象由构造函数 <code>RegExp</code> 创建</p><ol><li><code>/pattern/flags</code></li><li><code>new RegExp(&#39;pattern&#39;, &#39;flags&#39;)</code></li></ol><p>标志位 <em>flags</em>：</p><ul><li><code>g</code> 全局匹配模式（<em>默认模式只匹配第一个匹配项</em>）</li><li><code>i</code> 忽略大小写</li><li><code>m</code> 多行模式（<em>默认模式只匹配一行</em>）</li></ul><h4 id="正则表达式实例成员" tabindex="-1"><a class="header-anchor" href="#正则表达式实例成员"><span>正则表达式实例成员</span></a></h4><ul><li><code>RegExp.prototype.global</code> <em>布尔值</em>，是否开启全局匹配模式，只读属性</li><li><code>RegExp.prototype.ignoreCase</code> <em>布尔值</em>，是否忽略大小写，只读属性</li><li><code>RegExp.prototype.multiline</code> <em>布尔值</em>，是否开启多行模式，只读属性</li><li><code>RegExp.prototype.source</code> 规则字符串</li><li><code>RegExp.prototype.test(str)</code> 验证某个字符串是否满足规则，返回一个布尔值 <ul><li>开启全局匹配模式时，会从 <code>RegExp.lastIndex</code> 继续匹配，直到没有匹配项为止</li></ul></li><li><code>RegExp.prototype.exec(str)</code> 执行匹配，返回一个数组，包含匹配结果；如果没有匹配项，返回 <code>null</code><ul><li>属性 <code>0</code> 匹配项</li><li>属性 <code>index</code> 匹配项在字符串中的索引</li><li>属性 <code>input</code> 被匹配的字符串</li></ul></li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 判断匹配多少处</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">hello world, hello world, hello world</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#E7EE98;">hello</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (reg.</span><span style="color:#62E884;">exec</span><span style="color:#F6F6F4;">(str)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  count</span><span style="color:#F286C4;">++</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(count) </span><span style="color:#7B7F8B;">// 3</span></span></code></pre></div><div class="hint-container info"><p class="hint-container-title">贪婪模式</p><p>默认情况下，正则表达式匹配使用贪婪模式，即尽可能多的匹配字符</p><p>在量词后面加上 <code>?</code> 使其变为非贪婪模式，即尽可能少的匹配字符</p></div><h4 id="字符串中的正则表达式" tabindex="-1"><a class="header-anchor" href="#字符串中的正则表达式"><span>字符串中的正则表达式</span></a></h4><ul><li><code>String.prototype.match(reg)</code> 返回一个数组，包含所有匹配项；如果没有匹配项，返回 <code>null</code></li><li><code>String.prototype.search(reg)</code> 返回第一个匹配项的下标；如果没有匹配项，返回 <code>-1</code></li><li><code>String.prototype.split(reg)</code> 按匹配项分割字符串</li><li><code>String.prototype.replace(reg, newStr/func)</code> 替换所有匹配项，返回替换后的字符串</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#F286C4;">\\b</span><span style="color:#97E1F1;">[</span><span style="color:#BF9EEE;">a-z</span><span style="color:#97E1F1;">]</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F6F6F4;">str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">replace</span><span style="color:#F6F6F4;">(reg, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">match</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#F6F6F4;"> match.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// &quot;Hello World&quot;</span></span></code></pre></div>`,16)),n(" TODO: 得到一个字符串中中文字符的数量 "),n(" TODO: 将敏感词库的词语替换成 \\* "),n(" TODO: 得到一个html字符串中出现的章节数量 "),s[9]||(s[9]=a(`<h3 id="进阶规则" tabindex="-1"><a class="header-anchor" href="#进阶规则"><span>进阶规则</span></a></h3><h4 id="捕获组" tabindex="-1"><a class="header-anchor" href="#捕获组"><span>捕获组</span></a></h4><p>用 <code>()</code> 包裹的部分称为捕获组，捕获组会出现在匹配结果中</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#97E1F1;">[</span><span style="color:#BF9EEE;">a-z</span><span style="color:#97E1F1;">]</span><span style="color:#FFB86C;">)</span><span style="color:#97E1F1;">[</span><span style="color:#BF9EEE;">a-z</span><span style="color:#97E1F1;">]</span><span style="color:#F286C4;">+</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123abc456def</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">exec</span><span style="color:#F6F6F4;">(str)) </span><span style="color:#7B7F8B;">// [&quot;3abc&quot;, &quot;3a&quot;] // &quot;3a&quot; 是捕获组</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 得到所有日期，并得到具体年月日</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">2025-05-01, 2025-05-02, 2025-05-03</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{4}</span><span style="color:#FFB86C;">)</span><span style="color:#E7EE98;">-</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{2}</span><span style="color:#FFB86C;">)</span><span style="color:#E7EE98;">-</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{2}</span><span style="color:#FFB86C;">)</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reg.</span><span style="color:#62E884;">exec</span><span style="color:#F6F6F4;">(s))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(result) </span><span style="color:#7B7F8B;">// [&quot;2015-05-01&quot;, &quot;2015&quot;, &quot;05&quot;, &quot;01&quot;]</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><blockquote><p>捕获组按括号从左到右顺序排列</p></blockquote><ul><li><p>捕获组命名：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#FFB86C;">(?&lt;</span><span style="color:#F6F6F4;">year</span><span style="color:#FFB86C;">&gt;</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{4}</span><span style="color:#FFB86C;">)</span><span style="color:#E7EE98;">-</span><span style="color:#FFB86C;">(?&lt;</span><span style="color:#F6F6F4;">month</span><span style="color:#FFB86C;">&gt;</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{2}</span><span style="color:#FFB86C;">)</span><span style="color:#E7EE98;">-</span><span style="color:#FFB86C;">(?&lt;</span><span style="color:#F6F6F4;">day</span><span style="color:#FFB86C;">&gt;</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{2}</span><span style="color:#FFB86C;">)</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">2025-05-01, 2025-05-02, 2025-05-03</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reg.</span><span style="color:#62E884;">exec</span><span style="color:#F6F6F4;">(str))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(result.groups.year, result.groups.month, result.groups.day)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><ul><li>命名后的捕获组称为具名捕获组，可以通过 <code>result.groups</code> 访问</li></ul></li><li><p>非捕获组：使用 <code>?:</code> 包裹的部分称为非捕获组，不会出现在匹配结果中</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#FFB86C;">(?:</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{4}</span><span style="color:#FFB86C;">)</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span></code></pre></div></li></ul><p><code>String.prototype.replace()</code> 可以使用捕获组：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">2025-05-01, 2025-05-02, 2025-05-03</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{4}</span><span style="color:#FFB86C;">)</span><span style="color:#E7EE98;">-</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{2}</span><span style="color:#FFB86C;">)</span><span style="color:#E7EE98;">-</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{2}</span><span style="color:#FFB86C;">)</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">replace</span><span style="color:#F6F6F4;">(reg, </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">match</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">p1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">p2</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">p3</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  return</span><span style="color:#E7EE98;"> \`</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">p1</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">/</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">p2</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">/</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">p3</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span></span>
<span class="line"><span style="color:#F6F6F4;">}) </span><span style="color:#7B7F8B;">// &quot;2025/05/01, 2025/05/02, 2025/05/03&quot;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">replace</span><span style="color:#F6F6F4;">(reg, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">$1/$2/$3</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &quot;2025/05/01, 2025/05/02, 2025/05/03&quot;</span></span></code></pre></div><h4 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用"><span>反向引用</span></a></h4><p>在正则表达式中使用 <code>\\n</code> 引用前面捕获组的第 <code>n</code> 个匹配项；或者使用 <code>\\k&lt;name&gt;</code> 引用具名捕获组的匹配项</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 匹配连续相同数字</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{2}\\1</span><span style="color:#FFB86C;">)</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">1212</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(str) </span><span style="color:#7B7F8B;">// true</span></span></code></pre></div><h4 id="正向断言-正向预查" tabindex="-1"><a class="header-anchor" href="#正向断言-正向预查"><span>正向断言 / 正向预查</span></a></h4><p>检查某个字符后面的字符是否满足规则，满足该规则的字符不成为匹配结果</p><p>使用 <code>(?=)</code> 避免匹配后面的字符</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#97E1F1;">[</span><span style="color:#BF9EEE;">a-z</span><span style="color:#97E1F1;">]</span><span style="color:#FFB86C;">(</span><span style="color:#62E884;">?=</span><span style="color:#BF9EEE;">\\d</span><span style="color:#FFB86C;">)</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">a1b2c3</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reg.</span><span style="color:#62E884;">exec</span><span style="color:#F6F6F4;">(str))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(result[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">])</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#7B7F8B;">// &quot;a&quot; // &quot;b&quot; // &quot;c&quot;</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 一个数字每隔三位加一个逗号</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#F286C4;">\\B</span><span style="color:#FFB86C;">(</span><span style="color:#62E884;">?=</span><span style="color:#FFB86C;">(</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{3}</span><span style="color:#FFB86C;">)</span><span style="color:#F286C4;">+$</span><span style="color:#FFB86C;">)</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123456789</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">replace</span><span style="color:#F6F6F4;">(reg, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &quot;123,456,789&quot;</span></span></code></pre></div><h4 id="负向断言-负向预查" tabindex="-1"><a class="header-anchor" href="#负向断言-负向预查"><span>负向断言 / 负向预查</span></a></h4><p>检查某个字符后面的字符是否不满足规则，满足该规则的字符不成为匹配结果和捕获组</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#97E1F1;">[</span><span style="color:#BF9EEE;">a-z</span><span style="color:#97E1F1;">]</span><span style="color:#FFB86C;">(</span><span style="color:#EE6666;">?!</span><span style="color:#BF9EEE;">\\d</span><span style="color:#FFB86C;">)</span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">g</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">1a2b3c</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reg.</span><span style="color:#62E884;">exec</span><span style="color:#F6F6F4;">(str))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(result[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">])</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#7B7F8B;">// &#39;c&#39;</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">// 判断密码：大小写字母、数字、特殊字符（!@#,.）、长度 8-16 位</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#EE6666;"> /</span><span style="color:#F286C4;">^</span><span style="color:#FFB86C;">(</span><span style="color:#62E884;">?=</span><span style="color:#BF9EEE;">.</span><span style="color:#F286C4;">*</span><span style="color:#97E1F1;">[</span><span style="color:#BF9EEE;">a-z</span><span style="color:#97E1F1;">]</span><span style="color:#FFB86C;">)(</span><span style="color:#62E884;">?=</span><span style="color:#BF9EEE;">.</span><span style="color:#F286C4;">*</span><span style="color:#97E1F1;">[</span><span style="color:#BF9EEE;">A-Z</span><span style="color:#97E1F1;">]</span><span style="color:#FFB86C;">)(</span><span style="color:#62E884;">?=</span><span style="color:#BF9EEE;">.</span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;">\\d</span><span style="color:#FFB86C;">)(</span><span style="color:#62E884;">?=</span><span style="color:#BF9EEE;">.</span><span style="color:#F286C4;">*</span><span style="color:#97E1F1;">[</span><span style="color:#E7EE98;">!@#,</span><span style="color:#BF9EEE;">.</span><span style="color:#97E1F1;">]</span><span style="color:#FFB86C;">)</span><span style="color:#BF9EEE;">.</span><span style="color:#F286C4;">{8,16}$</span><span style="color:#EE6666;">/</span></span></code></pre></div><p>先预查某个字符后有必须的字符，再检查长度</p>`,22)),n(" TODO: 判断密码强度，有特殊字符为强 "),s[10]||(s[10]=a(`<h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><ol><li>语法错误：<code>Uncaught SyntaxError: Unexpected token ...</code> 导致整个脚本块无法执行</li><li>运行错误 <ol><li>运行报错：导致当前脚本块后续无法运行</li><li>运行结果不符合预期：无报错</li></ol></li></ol><h3 id="如何调试错误" tabindex="-1"><a class="header-anchor" href="#如何调试错误"><span>如何调试错误</span></a></h3><ol><li>控制台打印</li><li>断点调试 <ul><li>step over：执行一行</li><li>step into：进入当前函数</li></ul></li></ol><h3 id="抛出错误" tabindex="-1"><a class="header-anchor" href="#抛出错误"><span>抛出错误</span></a></h3><p>错误的本质在 js 中是一个对象</p><p>抛出错误：<code>throw 错误对象</code></p><p>错误对象构造函数：<code>new Error(&#39;错误信息&#39;)</code></p><p>错误堆栈：抛出行 --&gt; 执行的函数（<em>函数调用链</em>） --&gt; 全局环境</p><h4 id="错误对象" tabindex="-1"><a class="header-anchor" href="#错误对象"><span>错误对象</span></a></h4><p>静态成员：</p><ul><li><code>message</code> 错误信息</li><li><code>stack</code> 错误堆栈</li></ul><h4 id="不同类型的错误" tabindex="-1"><a class="header-anchor" href="#不同类型的错误"><span>不同类型的错误</span></a></h4><ul><li><code>new ReferenceError(&#39;引用错误&#39;)</code></li><li><code>new SyntaxError(&#39;语法错误&#39;)</code></li><li><code>new TypeError(&#39;类型错误&#39;)</code></li><li><code>new RangeError(&#39;范围错误&#39;)</code></li></ul><h3 id="捕获错误" tabindex="-1"><a class="header-anchor" href="#捕获错误"><span>捕获错误</span></a></h3><p>处理可能发生的问题</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块 1</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (错误对象) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块 2</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块 3</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>当运行代码块 1 发生错误时，立即执行代码块 2，错误对象为抛出的错误对象；无论是否发生错误，都会执行代码块 3；处理完的错误会继续执行后续代码</p><blockquote><p>即使在 <code>catch</code> 中 <code>return</code> 也不会退出，而是继续执行 <code>finally</code> 中的代码块</p></blockquote>`,19))])}const g=p(F,[["render",i]]),u=JSON.parse(`{"path":"/docs/learning/frontend/JavaScript.html","title":"JavaScript","lang":"zh-CN","frontmatter":{"description":"JavaScript 起源 网景公司（Netscape Communication Corporation）于 1994 年推出了第一款商用浏览器：网景（Netscape Navigator）。 1995 年，网景公司决定在浏览器中加入一门编程语言，用于实现用户交互效果，提高用户体验。 网景公司聘请 Brendan Eich 开发这门语言。10 天后，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoSheBRO\\"}]}"],["meta",{"property":"og:url","content":"https://XiaoSheBRO.github.io/docs/learning/frontend/JavaScript.html"}],["meta",{"property":"og:site_name","content":"Shaw's Book"}],["meta",{"property":"og:title","content":"JavaScript"}],["meta",{"property":"og:description","content":"JavaScript 起源 网景公司（Netscape Communication Corporation）于 1994 年推出了第一款商用浏览器：网景（Netscape Navigator）。 1995 年，网景公司决定在浏览器中加入一门编程语言，用于实现用户交互效果，提高用户体验。 网景公司聘请 Brendan Eich 开发这门语言。10 天后，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":78.6,"words":15720},"filePathRelative":"docs/learning/frontend/JavaScript.md","autoDesc":true}`);export{g as comp,u as data};
