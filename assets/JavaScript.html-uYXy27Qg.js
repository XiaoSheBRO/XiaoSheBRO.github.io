import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,e as a,b as l,r as e,o as c}from"./app-CrvVDNwZ.js";const r={};function t(F,s){const n=e("Mermaid");return c(),p("div",null,[s[0]||(s[0]=a(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h1><h2 id="javascript-起源" tabindex="-1"><a class="header-anchor" href="#javascript-起源"><span>JavaScript 起源</span></a></h2><p>网景公司（Netscape Communication Corporation）于 1994 年推出了第一款商用浏览器：网景（Netscape Navigator）。<br> 1995 年，网景公司决定在浏览器中加入一门编程语言，用于实现用户交互效果，提高用户体验。<br> 网景公司聘请 <strong>Brendan Eich</strong> 开发这门语言。10 天后， LiveScript 语言诞生。后来为了商业考虑，更名为 JavaScript（<em>JS</em>）。</p><blockquote><p>Java 与 JavaScript 的关系：周杰 ~ 周杰伦；葡萄 ~ 葡萄牙。</p></blockquote><h3 id="第一次浏览器大战" tabindex="-1"><a class="header-anchor" href="#第一次浏览器大战"><span>第一次浏览器大战</span></a></h3><p>网景公司计划在浏览器中加入网络操作系统，触动了微软的利益；<br> 1995 年微软发布 IE 浏览器，第一次浏览器大战开启。<br> JS 推出之后，网景取得了极大的竞争优质。<br> 微软对 JS 进行反编译，并借鉴 JS 推出了 JScript、VBScript 两种语言，这两种语言都可以在 IE 中执行。</p><p>第一次浏览器大战是<strong>标准之争</strong>。</p><p>1997 年，网景将 JavaScript 1.1 版本提交给 ECMA (欧洲计算机制造协会)，希望将其标准化。<br> ECMA 收录了 JavaScript 并提交给 ISO；经修改成为第一个JavaScript 标准，称为 <strong>ECMAScript</strong>，简称 ES。</p><p>IE3 发布，并绑定 Windows 操作系统，网景市场份额不断下滑，于 1998 破产被收购。</p><h3 id="第二次浏览器大战" tabindex="-1"><a class="header-anchor" href="#第二次浏览器大战"><span>第二次浏览器大战</span></a></h3><p>微软推出 IE4、IE5、IE6（捆绑 Windows XP）后，微软决定解散浏览器团队。<br> Brendan Eich 在网景解散后，带领团队成立 Mozilla 基金会，并将网景浏览器和 JS 开源。<br> 长时间内世界技术爱好者们对网景浏览器进行维护和修补。<br> 2002 年 Mozilla 基金会推出 Firefox 浏览器。<br> 2008 年 Google 推出 Chrome 浏览器；2010 年 Apple 推出 Safari 浏览器；2012 年 ASA 推出 Opera 浏览器。<br> Chrome 浏览器搭载了 JS 引擎 V8，可以将 JS 代码直接转换为字节码；JS 代码的执行速度大幅提升，理论上已经接近汇编语言。从此 JS 具备了编写大型应用的能力，甚至服务器应用。<strong>V8 引擎将 JS 的执行推向了一个新的台阶。</strong></p><blockquote><p>Ryan Dahl 直接利用 V8 引擎完成了 node.js，使 JS 语言在服务器端可以运行。</p></blockquote><h3 id="es-标准的发展" tabindex="-1"><a class="header-anchor" href="#es-标准的发展"><span>ES 标准的发展</span></a></h3><p>1997年 -- ES1<br> 1998年 -- ES2<br> 1999年 -- ES3<br> 2009年 -- ES5，从此习惯上不再区分 JavaScrip 和 ECMAScript<br> 2015年 -- ES6 / ES2015，从 ES6 开始，使用年号作为版本号<br> 2016年 -- ES2016<br> ……</p><p><mark>ES 的语言标准不涉及语言的运行环境</mark>；正是因为 ES 避免了运行环境，让 ES 有机会在各种环境中运行，使 ES 成为了一个通用编程语言。</p><p>通常把 ES 运行的环境称为<strong>宿主环境</strong></p><h2 id="javascript-语言特性" tabindex="-1"><a class="header-anchor" href="#javascript-语言特性"><span>JavaScript 语言特性</span></a></h2><ol><li>JavaScript 是一种解释型语言</li><li>JavaScript 是一个弱类型语言</li><li>单线程：上一件事情没有做完，下一件事情必须等待（<em>同步现象</em>）</li><li>异步：提高单线程的执行效率</li></ol><details class="hint-container details"><summary>📚 编程语言分类</summary><p>编译型语言：编译型语言会经过一个翻译的过程，负责编译的叫做编译器；翻译的结果叫做编译结果。</p><blockquote><p>如 C、C++ 等；<br> 优点：执行速度快；<br> 缺点：某个编译结果，难以适用于各种环境（<em>跨平台障碍</em>），部署繁琐。</p></blockquote><p>解释型语言：没有编译结果。</p><blockquote><p>如 JavaScript、Php 等；<br> 优点：跨平台，部署简单；<br> 缺点：执行速度稍慢。</p></blockquote><p>强类型语言：存放的数据类型不可变；</p><blockquote><p>优点：严谨；缺点：灵活性差，不易上手。</p></blockquote><p>弱类型语言：存放的数据类型可变；</p><blockquote><p>优点：灵活，易上手；缺点：不严谨。</p></blockquote><p>通常将弱类型的解释型语言称为 <em>脚本语言</em> 。</p></details><h2 id="js-代码书写位置-浏览器环境" tabindex="-1"><a class="header-anchor" href="#js-代码书写位置-浏览器环境"><span>JS 代码书写位置（<em>浏览器环境</em>）</span></a></h2><ol><li>直接书写在页面中的 <code>&lt;script&gt;</code> 元素中</li><li>写到外部 js 文件中，通过 <code>&lt;script&gt;</code> 元素的 <code>src</code> 属性引入 <ul><li>有利于浏览器缓存</li><li>有利于代码分离（<em>内容，样式，功能三者分离</em>），便于维护和阅读</li></ul></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>页面中可以存在多个 <code>&lt;script&gt;</code> 元素，执行顺序从上到下。</li><li>如果一个 <code>&lt;script&gt;</code> 元素使用 <code>src</code> 引入了外部代码，其内部书写的代码无效。</li><li><code>&lt;script&gt;</code> 元素的 <code>type</code> 属性可以指定代码语言；值为 MIME 类型。</li></ul></div><h2 id="基本语法规则" tabindex="-1"><a class="header-anchor" href="#基本语法规则"><span>基本语法规则</span></a></h2><ul><li>JavaScript 语法部分必须是英文符号</li><li>JavaScript 代码由多条语句构成，语句以 <code>;</code> 结尾（<em>不具有强制性</em>）</li><li>JavaScript 代码从上到下同步执行</li><li>JavaScript 语言大小写敏感</li></ul><h3 id="输入输出语句" tabindex="-1"><a class="header-anchor" href="#输入输出语句"><span>输入输出语句</span></a></h3><blockquote><p>所有的输出输出语句都不是 ES 标准。</p></blockquote><h4 id="输出语句" tabindex="-1"><a class="header-anchor" href="#输出语句"><span>输出语句</span></a></h4><ul><li><code>document.write()</code> 用于将数据输出到页面</li><li><code>alert()</code> 用于将数据以弹窗形式显示到页面</li><li><code>console.log()</code> 用于将数据输出到控制台</li></ul><h4 id="输入语句" tabindex="-1"><a class="header-anchor" href="#输入语句"><span>输入语句</span></a></h4><ul><li><code>prompt(&quot;请输入：&quot;)</code> 用于弹出输入框，获取用户输入的数据 <ul><li>点击取消返回 <code>null</code></li><li>点击确定返回用户输入的字符串</li></ul></li></ul><h3 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释"><span>代码注释</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">// 单行注释</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/*</span></span>
<span class="line"><span style="color:#7B7F8B;">多行注释</span></span>
<span class="line"><span style="color:#7B7F8B;">*/</span></span></code></pre></div><h2 id="数据和数据类型" tabindex="-1"><a class="header-anchor" href="#数据和数据类型"><span>数据和数据类型</span></a></h2><p>数据：有用的信息<br> 数据类型：数据的分类</p><blockquote><p>直接书写的具体数据，称为<strong>字面量</strong></p></blockquote><h3 id="js-中的数据类型" tabindex="-1"><a class="header-anchor" href="#js-中的数据类型"><span>JS 中的数据类型</span></a></h3><ul><li>原始类型(<em>不可再细分的类型</em>) <ul><li><code>number</code> 数字类型</li><li><code>string</code> 字符串类型</li><li><code>boolean</code> 布尔类型</li><li><code>undefined</code> 未定义类型</li><li><code>null</code> 空类型</li></ul></li><li>引用类型 <ul><li><code>object</code> 对象</li><li><code>function</code> 函数</li></ul></li></ul><h4 id="数字类型" tabindex="-1"><a class="header-anchor" href="#数字类型"><span>数字类型</span></a></h4><p>表示小数、整数等；书写方式：直接书写</p><blockquote><p>数字类型可以加上前缀，表示不同的进制；不加默认为十进制。<br> 前缀 <code>0</code> 表示八进制；前缀 <code>0x</code> 表示十六进制；前缀 <code>0b</code> 表示二进制。</p></blockquote><h4 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型"><span>字符串类型</span></a></h4><p>表示一长串文本（<em>0 个或多个文本</em>）；书写方式：</p><ol><li>单引号包裹 <code>&#39;some text&#39;</code></li><li>双引号包裹 <code>&quot;some text&quot;</code></li><li>反引号包裹（<em>模板字符串</em>）<code>\`some text\`</code></li></ol><div class="hint-container tip"><p class="hint-container-title">在字符串中表示特殊字符</p><p>使用转义符 <code>\\</code> 进行转义</p><ul><li><code>\\n</code> 换行符</li><li><code>\\t</code> 制表符</li></ul></div><div class="hint-container tip"><p class="hint-container-title">使用长数字还是字符串？</p><p>如果按照数字阅读则使用数字类型；否则使用字符串类型。</p></div><h4 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型"><span>布尔类型</span></a></h4><p>表示真或假；书写方式：</p><ul><li><code>true</code> 真</li><li><code>false</code> 假</li></ul><h4 id="undefined-类型" tabindex="-1"><a class="header-anchor" href="#undefined-类型"><span>undefined 类型</span></a></h4><p>表示未定义；书写方式：<code>undefined</code></p><h4 id="null-类型" tabindex="-1"><a class="header-anchor" href="#null-类型"><span>null 类型</span></a></h4><p>表示空值；书写方式：<code>null</code></p><h4 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h4><p>表示事物、东西等；对象是由多个基本类型或对象组合而成</p><p>属性：对象的成员</p><details class="hint-container details"><summary>📍 对象示例</summary><div class="language-json" data-highlighter="shiki" data-ext="json" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">小明</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 18</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">isStudent</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> true</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">address</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span>    </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">country</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">china</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>    </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">province</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">jiangsu</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span>    </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">city</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">suzhou</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">，</span></span>
<span class="line"><span>  </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">girlFriend:</span><span style="color:#BF9EEE;"> null</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><h3 id="判断数据的类型" tabindex="-1"><a class="header-anchor" href="#判断数据的类型"><span>判断数据的类型</span></a></h3><h4 id="typeof-操作符" tabindex="-1"><a class="header-anchor" href="#typeof-操作符"><span>typeof 操作符</span></a></h4><p>返回数据的类型字符串</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> 123</span><span style="color:#7B7F8B;"> // &#39;number&#39;</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // &#39;string&#39;</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> true</span><span style="color:#7B7F8B;"> // &#39;boolean&#39;</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> undefined</span><span style="color:#7B7F8B;"> // &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> null</span><span style="color:#7B7F8B;"> // &#39;object&#39; (_JS 特性_)</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> {} </span><span style="color:#7B7F8B;">// &#39;object&#39;</span></span></code></pre></div><blockquote><p>函数写法： <code>typeof()</code></p></blockquote><h2 id="变量-variable" tabindex="-1"><a class="header-anchor" href="#变量-variable"><span>变量 variable</span></a></h2><p>变量是一块<strong>内存</strong>空间，用于存放数据。</p><h3 id="变量的使用" tabindex="-1"><a class="header-anchor" href="#变量的使用"><span>变量的使用</span></a></h3><ul><li>任何可以书写数据的地方都可以使用变量</li><li>不可以使用一个未声明的变量， <ul><li>使用 <code>typeof</code> 时除外</li></ul></li></ul><h4 id="声明-定义-变量" tabindex="-1"><a class="header-anchor" href="#声明-定义-变量"><span>声明（定义）变量</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#7B7F8B;">// 声明了一个变量，声明后变量默认为 undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) </span><span style="color:#7B7F8B;">// undefined</span></span></code></pre></div><div class="hint-container info"><p class="hint-container-title">标识符的命名</p><p>在开发中，需要自行命名的位置，叫做标识符。</p><p>标识符的命名规则：</p><ul><li>必须以字母、下划线或 <code>$</code> 符号开头</li><li>其他位置可以出现数字、字母、下划线或 <code>$</code> 符号</li><li>不可以与关键字、保留字重复</li></ul><p>标识符命名命名规范：</p><ul><li>变量名应做到望文知义</li><li>多个单词使用驼峰命名法</li></ul></div><h4 id="变量的赋值" tabindex="-1"><a class="header-anchor" href="#变量的赋值"><span>变量的赋值</span></a></h4><p>赋值：向变量的内存空间中存放数据</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">// 将 123 存放到变量 a 中</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 123</span></span></code></pre></div><ul><li>变量可以被重新赋值，新的值会取代旧的值（<em>JS 中变量的数据类型是可变的</em>）</li><li>声明和赋值可以合并（<em>语法糖</em>）</li><li>多个变量可以合并声明并赋值（<em>语法糖</em>）</li></ul><details class="hint-container details"><summary>📍 语法糖示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#7B7F8B;">// 将变量 a 的数据**复制**到变量 b 中</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#7B7F8B;"> // 不影响变量 a 的数据（原始类型）</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  b </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  c </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 3</span></span></code></pre></div><blockquote><p>语法糖只是方便书写或记忆，没有实质性改变。</p></blockquote></details><h3 id="变量中的对象" tabindex="-1"><a class="header-anchor" href="#变量中的对象"><span>变量中的对象</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  account</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  password</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123456</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  isVip</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>读取对象中的某个属性：<code>变量名.属性名</code></p><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li>当读取的属性不存在时，会返回 <code>undefined</code></li><li>当读取的属性值不存在（<em>属性值为 <code>undefined</code> 或 <code>null</code></em>）时，会报错</li></ul></div><p>更改对象变量的属性：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  account</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  password</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123456</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  isVip</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 修改 user 对象的 password 属性值</span></span>
<span class="line"><span style="color:#F6F6F4;">user.password </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">654321</span><span style="color:#DEE492;">&#39;</span></span></code></pre></div><p>当赋值的属性不存在时会添加该属性</p><div class="hint-container warning"><p class="hint-container-title">注意</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#7B7F8B;">// user 为 undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">user.name </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">shaw</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // 会报错：原始类型 undefined 不可以添加属性</span></span></code></pre></div></div><p>删除属性：<code>delete 变量名.属性名</code></p><blockquote><p>实际编程时一般将属性值设为 <code>undefined</code> 以达到类似效果</p></blockquote><h4 id="属性表达式" tabindex="-1"><a class="header-anchor" href="#属性表达式"><span>属性表达式</span></a></h4><p>给属性属性赋值或读取属性时可以使用 <code>变量名[&quot;属性名&quot;]</code></p><p>属性表达式的使用场景：</p><ol><li>属性名中包含特殊字符（<em>不是标准标识符</em>） <ul><li>实际上 JS 对属性名的命名并不严格，属性名可以为任意格式（<em>字符串</em>）</li></ul></li><li>属性名为变量</li></ol><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> prop </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">user[prop] </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">shaw</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // 即 user.name = &#39;shaw&#39;</span></span></code></pre></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>属性名只能为<strong>字符串</strong><br> 如果不是字符串（如数字），宿主环境会自动转换为字符串</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#BF9EEE;">  0</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">obj[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">零</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">obj[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">zero</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]) </span><span style="color:#7B7F8B;">// &#39;zero&#39;</span></span></code></pre></div></div><h3 id="变量的声明提升" tabindex="-1"><a class="header-anchor" href="#变量的声明提升"><span>变量的声明提升</span></a></h3><p><strong>JS 中存在变量声明提升</strong>：<strong>所有</strong>变量的<strong>声明</strong>会自动提升到代码最顶部</p><blockquote><p>JS 中允许声明多个同名变量，<strong>声明提升后会变为一个</strong></p></blockquote><h3 id="全局对象" tabindex="-1"><a class="header-anchor" href="#全局对象"><span>全局对象</span></a></h3><p>JS 大部分宿主环境，都会提供一个特殊的对象，该对象可以在 JS 代码中直接访问，称为<strong>全局对象</strong></p><ul><li>浏览器全局对象：<code>window</code> (<em>表示整个窗口</em>)</li><li>Node.js 全局对象：<code>global</code> (<em>表示当前 Node.js 进程</em>)</li></ul><p><mark>开发者定义的所有变量实际上会成为全局对象的属性；但如果变量没有被赋值，则该变量不会覆盖全局对象中的同名属性</mark></p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>全局对象中的所有属性可以直接使用，前面无需加上全局对象名</li><li>变量赋值时不写 var 关键字，相当于直接给 <code>window</code> 的某个属性赋值</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> console </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 报错：console 被覆盖为字符串</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> console</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 正常输出</span></span>
<span class="line"><span style="color:#F6F6F4;">console </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // 无法访问声明的 console 变量，实际访问的是全局对象中的 console 属性</span></span></code></pre></div></div><div class="hint-container info"><p class="hint-container-title"><code>window</code> 中特殊的 <code>name</code> 属性</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> name</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(name) </span><span style="color:#7B7F8B;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> name) </span><span style="color:#7B7F8B;">// string</span></span>
<span class="line"><span style="color:#7B7F8B;">// 因为 window 对象中含有属性 name</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(name) </span><span style="color:#7B7F8B;">// &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> name) </span><span style="color:#7B7F8B;">// string</span></span>
<span class="line"><span style="color:#7B7F8B;">// name 属性会将任何赋值特殊处理为字符串</span></span></code></pre></div><blockquote><p>类似还有 <code>status</code> 等属性</p></blockquote></div><h3 id="引用类型变量的存储机制" tabindex="-1"><a class="header-anchor" href="#引用类型变量的存储机制"><span>引用类型变量的存储机制</span></a></h3><ul><li><p>原始类型的变量存放具体的内容到内存中</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">456</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) </span><span style="color:#7B7F8B;">// &#39;123&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(b) </span><span style="color:#7B7F8B;">// &#39;456&#39;</span></span></code></pre></div></li><li><p>引用类型的变量会另外开辟一块新的内存空间，存放对象的内容，再将该<strong>内存空间的地址</strong>存放到变量中</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj1</span></span>
<span class="line"><span style="color:#F6F6F4;">obj2.name </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">456</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj1.name) </span><span style="color:#7B7F8B;">// &#39;456&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj2.name) </span><span style="color:#7B7F8B;">// &#39;456&#39;</span></span></code></pre></div><p><code>obj1</code> 指向某对象（<em><code>obj1</code> 持有某对象的引用</em>）；<code>obj2</code> 指向同一对象（<em><code>obj2</code> 也持有同一对象的引用</em>）</p></li></ul><p><mark>出现对象字面量的位置，都一定会在内存中开辟一个新的空间</mark></p><details class="hint-container details"><summary>📍 对象的存储机制示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">小明</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 18</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  address</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 新的空间</span></span>
<span class="line"><span style="color:#F6F6F4;">    country</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">china</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">小红</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 18</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  address</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> user1.address</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">user2.name </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">小刚</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">user2.address.country </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">uk</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(user1.name, user2.name) </span><span style="color:#7B7F8B;">// &#39;小明&#39; &#39;小刚&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(user1.address.country, user2.address.country) </span><span style="color:#7B7F8B;">// &#39;uk&#39; &#39;uk&#39;</span></span></code></pre></div></details><blockquote><p>出现一对 <code>{}</code> 即为一块新的内存空间</p></blockquote><details class="hint-container details"><summary>📝 练习：变量交换</summary><div class="language-html" data-highlighter="shiki" data-ext="html" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a</span></span>
<span class="line"><span style="color:#F6F6F4;">  a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b</span></span>
<span class="line"><span style="color:#F6F6F4;">  b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a, b) </span><span style="color:#7B7F8B;">// 2 1</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 交换 parent 和 child 属性，但不创建新的对象</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    parent</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">456</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    child</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">789</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> item.parent</span></span>
<span class="line"><span style="color:#F6F6F4;">  item.parent </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> item.child</span></span>
<span class="line"><span style="color:#F6F6F4;">  item.child </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre></div></details><h4 id="js-中的垃圾回收" tabindex="-1"><a class="header-anchor" href="#js-中的垃圾回收"><span>JS 中的垃圾回收</span></a></h4><p>JS 引擎中的垃圾回收器会定期的发现内存中无法访问到的对象，该对象称之为垃圾，JS 引擎会在合适的时间将其占用的内存空间释放。</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>解决数据的运算问题</p><h3 id="操作符和操作数" tabindex="-1"><a class="header-anchor" href="#操作符和操作数"><span>操作符和操作数</span></a></h3><p>操作符：运算符，参与运算的符号<br> 操作数：参与运算的数据，也称之为 <em>元</em>、<em>目</em></p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>操作符不一定只有一个符号</li><li>操作符出现在不同的位置可能具有不同的含义</li></ul></div><details class="hint-container details"><summary>📍 操作符示例</summary><ol><li><code>=</code> 赋值符，将右边的数据赋值给左边</li><li><code>.</code> 访问符，用于访问对象的属性</li><li><code>[]</code> 访问符，同上</li><li><code>()</code> 函数调用符</li></ol></details><h3 id="运算符的分类" tabindex="-1"><a class="header-anchor" href="#运算符的分类"><span>运算符的分类</span></a></h3><p>按操作数数量分类：</p><ul><li>一元（<em>单目</em>）运算符 <ul><li><code>()</code>, <code>.</code>, <code>[]</code>...</li></ul></li><li>二元（<em>双目</em>）运算符 <ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>=</code>...</li></ul></li><li>三元（<em>三目</em>）运算符 <ul><li><code>?</code>, <code>:</code></li></ul></li></ul><p>按功能分类：</p><ul><li>算术（<em>数学</em>）运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li><li>其他...</li></ul><h3 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式"><span>表达式</span></a></h3><p>表达式 = 操作符 + 操作数</p><p>每个表达式都有一个运算结果，该结果称为<strong>返回值</strong>；返回值的类型叫做<strong>返回类型</strong></p><p><mark>所有的表达式都可以当作数据使用</mark></p><h4 id="常见表达式的返回值" tabindex="-1"><a class="header-anchor" href="#常见表达式的返回值"><span>常见表达式的返回值</span></a></h4><ol><li><p><code>=</code> 赋值符：返回赋的值</p><ul><li><code>a = b = c = 1</code> 利用返回值赋值多个变量</li><li>如果为声明 + 赋值的表达式，返回值为 <code>undefined</code></li></ul></li><li><p><code>.</code> 访问符：返回属性的值</p></li><li><p><code>()</code> 函数调用符：返回的结果取决于函数的运行结果</p></li><li><p><code>console.log()</code> 的返回值为 <code>undefined</code></p><blockquote><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;&#39;</span><span style="color:#F6F6F4;">)) </span><span style="color:#7B7F8B;">// 输出：undefined</span></span></code></pre></div></blockquote></li></ol><div class="hint-container info"><p class="hint-container-title"><code>REPL</code> 环境</p><p>浏览器控制台的环境为 <code>REPL</code> 环境：<br> REPL(Read-Eval-Print-Loop)：读取-执行-打印-循环<br> 直接在控制台书写代码时，除了会执行代码，还会输出该表达式的返回值</p></div><h4 id="在模板字符串中使用表达式" tabindex="-1"><a class="header-anchor" href="#在模板字符串中使用表达式"><span>在模板字符串中使用表达式</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">Mike</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 18</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  gender</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> example </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> \`</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">user.name</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">user.age</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> years old, gender is </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">user.gender</span><span style="color:#F286C4;"> ==</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> ?</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">Male</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;"> :</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">Female</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">.\`</span></span></code></pre></div><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><ul><li><code>+</code> 加 / 正</li><li><code>-</code> 减 / 负</li><li><code>*</code> 乘</li><li><code>/</code> 除</li><li><code>%</code> 求余数（<em>与取模有细微区别</em>）</li><li><code>++</code> 自增</li><li><code>--</code> 自减</li><li><code>**</code> 幂运算</li></ul><h4 id="运算中的特殊数字" tabindex="-1"><a class="header-anchor" href="#运算中的特殊数字"><span>运算中的特殊数字</span></a></h4><ul><li>当除数为 <code>0</code> 时，得到关键字 <code>Infinity</code> (<em><code>number</code> 类型</em>) <ul><li>被除数为正数：<code>Infinity</code> 正无穷</li><li>被除数为负数：<code>-Infinity</code> 负无穷</li><li>被除数为 <code>0</code>：<code>NaN</code> (<em>Not a Number, 非数字，<code>number</code> 类型</em>)</li></ul></li><li><code>NaN</code> 虽然虽然是数字，但其和任何数字进行算术运算的结果都是 <code>NaN</code></li></ul><details class="hint-container details"><summary>📚 <code>isNaN</code> 函数：返回一个数据是否为 <code>NaN</code></summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#62E884;">isNaN</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#62E884;">isNaN</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span></code></pre></div></details><details class="hint-container details"><summary>📚 <code>isFinite</code> 函数：返回一个数据是否为有限数字</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#62E884;">isFinite</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">Infinity</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#62E884;">isFinite</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">Infinity</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#62E884;">isFinite</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#62E884;">isFinite</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// true</span></span></code></pre></div></details><h4 id="求余运算符" tabindex="-1"><a class="header-anchor" href="#求余运算符"><span><code>%</code> 求余运算符</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F286C4;"> %</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">5</span><span style="color:#F286C4;"> %</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// -1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F286C4;"> %</span><span style="color:#F286C4;"> -</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">10</span><span style="color:#F286C4;"> %</span><span style="color:#F286C4;"> -</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// -1</span></span></code></pre></div><details class="hint-container details"><summary>📚 求余和取模</summary><ul><li>求余（<em>x rem y</em>）：x - n * y <ul><li>n = x / y （<em>向零取整：直接去掉小数</em>）</li><li>余数与<strong>被除数符号相同</strong>；与除数的符号无关</li></ul></li><li>取模（<em>x mod y</em>）：x - n * y <ul><li>n = x / y （<em>向下取整</em>）</li><li>余数与<strong>除数的符号相同</strong>；与被除数符号无关</li></ul></li></ul></details><h4 id="非数字类型使用算术运算符" tabindex="-1"><a class="header-anchor" href="#非数字类型使用算术运算符"><span>非数字类型使用算术运算符</span></a></h4><p>算数运算符（<em>除 <code>+</code> 加法外</em>）遇到非数字的类型时，会将其转换为数字类型（<em>自动完成转换</em>），然后进行运算；</p><h5 id="转换规则" tabindex="-1"><a class="header-anchor" href="#转换规则"><span>转换规则</span></a></h5><div class="hint-container important"><p class="hint-container-title">重要</p><ol><li><p><code>true</code> ==&gt; <code>1</code>; <code>false</code> ==&gt; <code>0</code></p></li><li><p><code>null</code> ==&gt; <code>0</code></p></li><li><p><code>undefined</code> ==&gt; <code>NaN</code></p></li><li><p><code>string</code> 类型：</p><ul><li>如果字符串内部是一个正确的数字（<em>含 <code>Infinity</code></em>），则直接转换为数字</li><li>如果字符串内部不是一个正确的数字，则转换为 <code>NaN</code></li><li>如果是一个空字符串 <code>&quot;&quot;</code>，转换为 <code>0</code></li><li>字符串转换时会忽略首尾空格</li></ul></li><li><p><code>object</code> 类型：将对象类型先转换为字符串 <code>&quot;[object Object]&quot;</code>, 然后再将该字符串转换为数字类型，即 <code>NaN</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">{} </span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;"> 5</span><span style="color:#7B7F8B;"> // 报错：{} 被解释为代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">({} </span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;"> 5</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// ==&gt; NaN * 5 // NaN</span></span></code></pre></div></li></ol></div><blockquote><p>运算中的类型转换不会影响原数据</p></blockquote><div class="hint-container tip"><p class="hint-container-title">强制转换</p><p>通常在非数字的类型前面加 <code>+</code> 正运算符，可以强制转换为数字类型</p><ul><li><code>+true</code> ==&gt; <code>1</code></li><li><code>+{}</code> ==&gt; <code>NaN</code></li></ul><blockquote><p>JS 中 <code>0</code> 分为 <code>+0</code> 和 <code>-0</code> 两种形式。</p></blockquote></div><h5 id="加运算符的运算规则" tabindex="-1"><a class="header-anchor" href="#加运算符的运算规则"><span><code>+</code> 加运算符的运算规则</span></a></h5><div class="hint-container important"><p class="hint-container-title">重要</p><ol><li>加号某一边出现 <code>string</code> / <code>object</code> 类型：进行字符串拼接(<em>将其他类型转为字符串</em>) <ul><li>数字 ==&gt; 数字字符串</li><li><code>null</code> ==&gt; <code>&quot;null&quot;</code></li><li><code>undefined</code> ==&gt; <code>&quot;undefined&quot;</code></li><li><code>boolean</code> ==&gt; <code>&quot;true&quot;</code> / <code>&quot;false&quot;</code></li><li><code>object</code> ==&gt; <code>&quot;[object Object]&quot;</code></li></ul></li><li>加号两边都为其他原始类型：<a href="#%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99">转为数字运算</a></li></ol></div><h4 id="自增与自减" tabindex="-1"><a class="header-anchor" href="#自增与自减"><span>自增与自减</span></a></h4><ul><li><code>++</code> 将某个变量的值自增 <code>1</code></li><li><code>--</code> 将某个变量的值自减 <code>1</code></li></ul><p>自增与自减表达式：</p><ul><li><code>x++</code> 将变量 <code>x</code> 自增 <code>1</code>; 返回自增之前 <code>x</code> 的值（<em>先返回后自增</em>）</li><li><code>++x</code> 将变量 <code>x</code> 自增 <code>1</code>; 返回自增之后 <code>x</code> 的值（<em>先自增后返回</em>）</li><li><code>x--</code> 将变量 <code>x</code> 自减 <code>1</code>; 返回自减之前 <code>x</code> 的值</li><li><code>--x</code> 将变量 <code>x</code> 自减 <code>1</code>; 返回自减之后 <code>x</code> 的值</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span></code></pre></div><h4 id="算数运算符优先级" tabindex="-1"><a class="header-anchor" href="#算数运算符优先级"><span>算数运算符优先级</span></a></h4><p><code>++</code>，<code>--</code> &gt;&gt; <code>+</code> 正，<code>-</code> 负 &gt;&gt; <code>**</code> &gt;&gt; <code>*</code>，<code>/</code>，<code>%</code> &gt;&gt; <code>+</code> 加，<code>-</code> 减 &gt;&gt; <code>=</code> 赋值</p><div class="hint-container important"><p class="hint-container-title">运算符优先级的运行细节</p><ul><li>从左到右依次查看，每次运算后再从左开始查看</li><li>如果遇到操作数，则将数据的值直接取出</li><li>如果遇到相邻的两个运算符，左边的运算符优先级大于等于右边，则运行左边的运算</li></ul></div><details class="hint-container details"><summary>📝 练习：运算符优先级</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> +</span><span style="color:#BF9EEE;"> 1</span><span style="color:#7B7F8B;"> // 1 + 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y) </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x) </span><span style="color:#7B7F8B;">// 2</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> /</span><span style="color:#BF9EEE;"> 0</span><span style="color:#7B7F8B;"> // typeof 优先级高于 /</span></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;number&quot; / 0</span></span>
<span class="line"><span style="color:#7B7F8B;">// NaN / 0</span></span>
<span class="line"><span style="color:#7B7F8B;">// NaN</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#F286C4;"> ++</span><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + x++ * ++x + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * ++x + x // x ==&gt; 2</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * 3 + x // x ==&gt; 3</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 3 + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 4 + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 7</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#F6F6F4;"> (x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#F286C4;"> ++</span><span style="color:#F6F6F4;">x) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + x++ * (x = x + x++ * ++x) + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = x + x++ * ++x) + x // x ==&gt; 2</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 2 + x++ * ++x) + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 2 + 2 * ++x) + x // x ==&gt; 3</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 2 + 2 * 4) + x // x ==&gt; 4</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 2 + 8) + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 1 * (x = 10) + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1 + 10 + x // x ==&gt; 10</span></span>
<span class="line"><span style="color:#7B7F8B;">// 11 + x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 21</span></span></code></pre></div></details><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h3><ul><li>比较运算符的返回值为 <code>true</code> / <code>false</code></li><li>算术运算符的优先级高于比较运算符</li></ul><h4 id="大小比较" tabindex="-1"><a class="header-anchor" href="#大小比较"><span>大小比较</span></a></h4><ul><li><code>&gt;</code> 大于</li><li><code>&lt;</code> 小于</li><li><code>&gt;=</code> 大于等于</li><li><code>&lt;=</code> 小于等于</li></ul><p>比较规则：</p><ol><li><p>其中一边为非字符串的原始类型：<a href="#%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99">转换为数字比较</a></p></li><li><p>两边都为字符串：比较对位字符的 ASCII 编码(<em>从前往后，没有对位按 0 计算</em>)</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">A</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;"> &gt;</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">B</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 65 &gt; 66 ==&gt; false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`AB\`</span><span style="color:#F286C4;"> &gt;</span><span style="color:#E7EE98;"> \`AC\`</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 66 &gt; 67 ==&gt; false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">11</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;"> &gt;</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 49 &gt; 0 ==&gt; true</span></span></code></pre></div></li><li><p>其中一边为对象：将对象转换为原始类型再按以上两种规则比较</p></li></ol><div class="hint-container tip"><p class="hint-container-title">特殊数字比较规则</p><ul><li><code>NaN</code> 与其他任何数字比较，结果为 <code>false</code></li><li><code>Infinity</code> 大于任何其他数字</li><li><code>- Infinity</code> 小于任何其他数字</li></ul></div><h4 id="相等比较" tabindex="-1"><a class="header-anchor" href="#相等比较"><span>相等比较</span></a></h4><ul><li><code>==</code> 比较两个数据是否相等</li><li><code>!=</code> 比较两个数据是否不相等</li></ul><p>两边的类型相同：直接比较数据本身（<em>两个对象比较对象地址</em>）</p><p>两边类型不同：</p><ol><li><code>null</code> 与 <code>undefined</code> 互相相等；但与其他类型不等</li><li>其他原始类型<a href="#%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99">转换为数字比较</a></li><li>其中一边为对象比较时，转换为原始类型再比较</li></ol><div class="hint-container important"><p class="hint-container-title">特殊数字相等规则</p><ul><li><code>NaN</code> 与任何数字（<em>包括自身</em>）都不相等</li><li><code>Infinity</code> / <code>-Infinity</code> 只与自身相等</li></ul></div><blockquote><p>由于 <code>==</code> 规则比较违反直觉，通常不使用 <code>==</code> 进行相等比较</p></blockquote><h4 id="严格相等" tabindex="-1"><a class="header-anchor" href="#严格相等"><span>严格相等</span></a></h4><ul><li><code>===</code> 严格相等，两端类型和数据必须都相同</li><li><code>!==</code> 严格不相等，两端类型或数据任一不相同</li></ul><p>两端类型不相同：直接返回 <code>false</code><br> 类型相同：比较数据本身（<em>对象比较地址</em>）</p><div class="hint-container important"><p class="hint-container-title">特殊数字严格相等规则</p><ul><li><code>NaN</code> 与任何数字（<em>包括自身</em>）都不相等</li><li><code>Infinity</code> / <code>-Infinity</code> 只与自身相等</li></ul></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><p><mark>逻辑运算符的返回值不一定为 <code>Boolean</code> 类型</mark></p><h4 id="与-并且" tabindex="-1"><a class="header-anchor" href="#与-并且"><span>与 / 并且 <code>&amp;&amp;</code></span></a></h4><p>&lt;表达式 1&gt; <code>&amp;&amp;</code> &lt;表达式 2&gt;</p><p>执行过程：<br> 将&lt;表达式 1&gt;进行 Boolean 判定；<br> 若&lt;表达式 1&gt;判定结果为假，则直接返回&lt;表达式 1&gt;的结果，<strong>而不执行&lt;表达式 2&gt;</strong>；<br> 若&lt;表达式 1&gt;为真，则返回&lt;表达式 2&gt;的结果（<em>短路规则</em>）</p><h5 id="boolean判定" tabindex="-1"><a class="header-anchor" href="#boolean判定"><span>Boolean判定</span></a></h5><div class="hint-container important"><p class="hint-container-title">重要</p><p>以下数据均判断为 <code>false</code> (<em>其他数据均为 <code>true</code></em>)：</p><ul><li><code>false</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>NaN</code></li><li><code>&#39;&#39;</code></li><li><code>0</code></li></ul></div><h4 id="或" tabindex="-1"><a class="header-anchor" href="#或"><span>或 <code>||</code></span></a></h4><p>&lt;表达式 1&gt; <code>||</code> &lt;表达式 2&gt;</p><p>执行过程：将&lt;表达式 1&gt;进行 Boolean 判定；<br> 若&lt;表达式 1&gt;判定结果为真，则直接返回&lt;表达式 1&gt;的结果，<strong>而不执行&lt;表达式 2&gt;</strong>；<br> 若&lt;表达式 1&gt;为假则返回&lt;表达式 2&gt;的结果（<em>短路规则</em>）</p><h4 id="非" tabindex="-1"><a class="header-anchor" href="#非"><span>非 <code>!</code></span></a></h4><p><code>!</code> &lt;数据&gt;：将数据的 Boolean 判定结果取反（<em>一定返回 <code>Boolean</code> 类型</em>）</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;"> +</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span></code></pre></div><details class="hint-container details"><summary>📝 练习：逻辑运算符</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 100</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 100</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 0</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 4</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 0</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;"> -</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">age </span><span style="color:#F286C4;">&lt;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> (age </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(age) </span><span style="color:#7B7F8B;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> y</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> y</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 4</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> y</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 4</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(y) </span><span style="color:#7B7F8B;">// 4</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;"> &gt;</span><span style="color:#BF9EEE;"> 3</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> 10</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 10</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">undefined</span><span style="color:#F286C4;"> ||</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &#39;abc&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> null</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> undefined</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> ||</span><span style="color:#BF9EEE;"> NaN</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">小明</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">user.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> user.age </span><span style="color:#F286C4;">||</span><span style="color:#BF9EEE;"> 18</span></span>
<span class="line"><span style="color:#7B7F8B;">// user.age === undefined &amp;&amp; user.age = 18</span></span></code></pre></div></details><details class="hint-container details"><summary>📝 练习：判断闰年</summary><p>在变量中存放年份；使用逻辑判断该年是否为闰年。<br> 闰年规则：四年一闰，百年不闰，四百年再闰。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> year </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2009</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> year </span><span style="color:#F286C4;">%</span><span style="color:#BF9EEE;"> 4</span><span style="color:#F286C4;"> ===</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F286C4;"> &amp;&amp;</span><span style="color:#F6F6F4;"> (year </span><span style="color:#F286C4;">%</span><span style="color:#BF9EEE;"> 100</span><span style="color:#F286C4;"> !==</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F286C4;"> ||</span><span style="color:#F6F6F4;"> year </span><span style="color:#F286C4;">%</span><span style="color:#BF9EEE;"> 400</span><span style="color:#F286C4;"> ===</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">((result </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">是闰年</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">||</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">不是闰年</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span></code></pre></div></details><h3 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h3><p>&lt;表达式 1&gt; <code>?</code> &lt;表达式 2&gt; <code>:</code> &lt;表达式 3&gt;</p><p>执行过程：对&lt;表达式 1&gt;进行 Boolean 判定，若为真，则返回&lt;表达式 2&gt;的结果；若为假，则返回&lt;表达式 3&gt;的结果</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> ?</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> :</span><span style="color:#F286C4;"> ++</span><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">*</span><span style="color:#F286C4;"> ++</span><span style="color:#F6F6F4;">x </span><span style="color:#7B7F8B;">// x++ * ++x</span></span>
<span class="line"><span style="color:#7B7F8B;">// 2 * 3</span></span>
<span class="line"><span style="color:#7B7F8B;">// 6</span></span></code></pre></div><h3 id="复合赋值运算符" tabindex="-1"><a class="header-anchor" href="#复合赋值运算符"><span>复合赋值运算符</span></a></h3><ul><li><code>+=</code> 加等于</li><li><code>-=</code> 减等于</li><li><code>*=</code> 乘等于</li><li><code>/=</code> 除等于</li><li><code>%=</code> 求余等于</li><li><code>**=</code> 幂等于</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">+=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#7B7F8B;"> // x = x + 1</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">*=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F286C4;"> +</span><span style="color:#BF9EEE;"> 2</span><span style="color:#7B7F8B;"> // x = x * (1 + 2)</span></span></code></pre></div><h3 id="void-运算符" tabindex="-1"><a class="header-anchor" href="#void-运算符"><span><code>void</code> 运算符</span></a></h3><p>一元运算符；运行表达式，并返回 <code>undefined</code></p><ul><li>普通写法 <code>void</code> &lt;操作数&gt;</li><li>函数写法 <code>void(</code> &lt;表达式&gt; <code>)</code></li></ul><h3 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符"><span>逗号运算符</span></a></h3><p>&lt;表达式 1&gt; <code>,</code> &lt;表达式 2&gt;</p><p>依次运行表达式，然后返回&lt;表达式 2&gt;的结果</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">, x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">, x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> *</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// x = 6</span></span></code></pre></div><blockquote><p>逗号运算符的优先级低于赋值运算符</p></blockquote><h3 id="js-如何存储数字" tabindex="-1"><a class="header-anchor" href="#js-如何存储数字"><span>JS 如何存储数字</span></a></h3><ul><li>JS 中小数和整数的运算都是不精确的</li><li>JS 中整数不是连续的 <ul><li>当数字特别大时不再连续</li></ul></li><li>JS 中十进制的小数，转换为二进制后，可能是无限小数；由于存储能力限制，因此会丢失一些精度</li></ul><p><mark>在对精度要求很高的系统中，或要对小数运算结果进行比较时，需要特别注意</mark></p><div class="hint-container info"><p class="hint-container-title">计算机语言存储数字的方式</p><ol><li>整数法</li><li>浮点法 <ul><li>浮点法存放的数字叫 <em>浮点数</em></li><li>浮点数分为单精度和双精度</li><li>双精度存放的有效位数更多，占用空间更大</li></ul></li></ol><p>计算机中，位（<em>bit</em>）是计算机最小的存储单位，一个位可以存储 <code>0</code> 或 <code>1</code> 两种状态</p><ul><li>1 byte = 8 bit</li><li>1 KB = 1024 byte</li></ul></div><p>JS 中存储的所有数字，都按照双精度浮点数存放(<em>IEEE 754 标准</em>)：</p><ul><li>每个数字开辟一个内存空间，尺寸固定为64位 <ul><li>第 <code>1</code> 位：表示符号位，<code>0</code> 表示正数，<code>1</code> 表示负数</li><li>第 <code>2 ~ 12</code> 位（<em>11位</em>）：表示指数位，即 2 为底的指数（<em>2 的次方</em>），其范围为 <code>0 ~ 2047</code></li><li>第 <code>13 ~ 64</code> 位（<em>52位</em>）：表示尾数，相当于<code>1.xxxx</code> 的小数位</li></ul></li><li>表示的十进制数的方法 <code>1.尾数 * 2 ^ (指数位 - 1023)</code></li></ul><p>特殊情况：</p><ol><li>指数为 <code>0</code>，尾数为 <code>0</code>：表示 <code>0</code></li><li>指数为 <code>2047</code>，尾数为 <code>0</code>：表示 <code>Infinity</code> / <code>-Infinity</code></li><li>指数为 <code>2047</code>，尾数非 <code>0</code>：表示 <code>NaN</code></li></ol><blockquote><p>一个正常的数字的指数部分最大为 2046</p></blockquote><ul><li>JS 能表示的最大数字： <code>Number.MAX_VALUE</code> 即 <code>0 11111111110 111....111</code></li><li>JS 能表示的最小正数： <code>Number.MIN_VALUE</code> 即 <code>0 00000000000 000....001</code></li><li>JS 能表示的最大安全数（<em>最大连续整数</em>）：<code>Number.MAX_SAFE_INTEGER</code> 即 <code>0 10000110011 111...111</code> 即 <code>2^53 - 1</code></li></ul><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h3><p>将一个整数的二进制格式进行计算；在 JS 中，如果对一个数据进行位运算，先会将其转换为一个整数（<em>直接抹去小数部分</em>），然后按照 <strong>32 位</strong>的二进制格式进行运算</p><div class="hint-container info"><p class="hint-container-title">32 位二进制格式</p><ul><li>第一位为符号位，其余为数据位</li><li>特殊数字的32 位二进制：全为 <code>0</code></li></ul></div><h4 id="与运算" tabindex="-1"><a class="header-anchor" href="#与运算"><span>与运算 <code>&amp;</code></span></a></h4><p>&lt;整数 1&gt; <code>&amp;</code> &lt;整数 2&gt;</p><p>将两个整数按位比较，如果都为 <code>1</code>，则结果为 <code>1</code>，否则为 <code>0</code></p><h4 id="或运算" tabindex="-1"><a class="header-anchor" href="#或运算"><span>或运算 <code>|</code></span></a></h4><p>&lt;整数 1&gt; <code>|</code> &lt;整数 2&gt;</p><p>将两个整数按位比较，如果有一个为 <code>1</code>，则结果为 <code>1</code>，否则为 <code>0</code></p><h4 id="否运算" tabindex="-1"><a class="header-anchor" href="#否运算"><span>否运算 <code>~</code></span></a></h4><p><code>~</code> &lt;整数&gt;</p><p>将该整数按位取反</p><blockquote><p>快速算法：该整数的相反数减一</p></blockquote><details class="hint-container details"><summary>📍 JS 中最快速的取整</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">~~</span><span style="color:#BF9EEE;">3.5</span><span style="color:#7B7F8B;"> // 3</span></span></code></pre></div></details><h4 id="异或运算" tabindex="-1"><a class="header-anchor" href="#异或运算"><span>异或运算 <code>^</code></span></a></h4><p>&lt;整数 1&gt; <code>^</code> &lt;整数 2&gt;</p><p>将两个整数按位比较，相同为 <code>0</code>，否则为 <code>1</code></p><details class="hint-container details"><summary>📍 位的叠加 / 位的开关</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">// 权限枚举</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> perm </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  read</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 0b001</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  write</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 0b010</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  create</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;"> 0b100</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 保存权限</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> perm.read </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> perm.write</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 判断权限</span></span>
<span class="line"><span style="color:#F6F6F4;">p </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> (perm.read </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> perm.read) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">有读权限</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">无读权限</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 去掉权限</span></span>
<span class="line"><span style="color:#F6F6F4;">p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (p </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> perm.read) </span><span style="color:#F286C4;">^</span><span style="color:#F6F6F4;"> perm.read</span></span></code></pre></div></details><h4 id="左移运算" tabindex="-1"><a class="header-anchor" href="#左移运算"><span>左移运算 <code>&lt;&lt;</code></span></a></h4><p>&lt;整数&gt; <code>&lt;&lt;</code> &lt;位数&gt;</p><p>将整数的二进制数据位向左移动指定位数（<em>即 <code>整数 * 2 ^ n</code></em>）</p><h4 id="右移运算" tabindex="-1"><a class="header-anchor" href="#右移运算"><span>右移运算 <code>&gt;&gt;</code></span></a></h4><p>&lt;整数&gt; <code>&gt;&gt;</code> &lt;位数&gt;</p><p>将整数的二进制数据位向右移动指定位数（<em>即 <code>整数 / 2 ^ n</code> 并取整</em>）</p><blockquote><p><code>&gt;&gt;&gt;</code> 全右移运算：包含符号位向右位移</p></blockquote><h2 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制"><span>流程控制</span></a></h2><h3 id="判断" tabindex="-1"><a class="header-anchor" href="#判断"><span>判断</span></a></h3><h4 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span><code>if</code> 语句</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">// 单个 if 结构</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (条件表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (条件表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (条件表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 可以没有 else if</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 可以没有 else</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>对条件表达式进行<a href="#Boolean%E5%88%A4%E5%AE%9A">Boolean判定</a>；若为真，则执行代码块；</p><ul><li>如果代码块只有一条语句则可以省略 <code>{}</code></li><li><strong>如果某个条件判定为真则忽略后面所有条件</strong></li></ul><details class="hint-container details"><summary>📍 if 语句示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> score </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 85</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (score </span><span style="color:#F286C4;">&gt;=</span><span style="color:#BF9EEE;"> 90</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">优秀</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (score </span><span style="color:#F286C4;">&gt;=</span><span style="color:#BF9EEE;"> 80</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">良好</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (score </span><span style="color:#F286C4;">&gt;=</span><span style="color:#BF9EEE;"> 60</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">及格</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">不及格</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">x) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x</span><span style="color:#F286C4;">++</span><span style="color:#F286C4;"> &gt;=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  var</span><span style="color:#F6F6F4;"> x </span><span style="color:#7B7F8B;">// 声明提升</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">++</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">x </span><span style="color:#F286C4;">&gt;=</span><span style="color:#BF9EEE;"> 2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">++</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  x</span><span style="color:#F286C4;">--</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(x) </span><span style="color:#7B7F8B;">// 3</span></span></code></pre></div></details><h4 id="switch-语句-开关" tabindex="-1"><a class="header-anchor" href="#switch-语句-开关"><span><code>switch</code> 语句（<em>开关</em>）</span></a></h4><blockquote><p><code>switch</code> 的语法始终可以使用 <code>if</code> 语句替代</p></blockquote><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">switch</span><span style="color:#F6F6F4;"> (表达式) {</span></span>
<span class="line"><span style="color:#F286C4;">  case</span><span style="color:#F6F6F4;"> 数据1:</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">  case</span><span style="color:#F6F6F4;"> 数据2:</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">  default</span><span style="color:#F6F6F4;">: </span><span style="color:#7B7F8B;">// 可选，都不匹配时执行</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>计算表达式的返回值，依次和 <code>case</code> 后的数据进行<strong>严格相等</strong>比较；如果某个 <code>case</code> 相等，则停止比较并运行其内部的代码块，<strong>然后依次运行之后所有 <code>case</code> 的代码块</strong>。</p><p>在 <code>case</code> 分支内部使用 <code>break</code> 关键字，可以立刻停止 <code>switch</code> 结构：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">switch</span><span style="color:#F6F6F4;"> (表达式) {</span></span>
<span class="line"><span style="color:#F286C4;">  case</span><span style="color:#F6F6F4;"> 数据1:</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">    break</span></span>
<span class="line"><span style="color:#F286C4;">  case</span><span style="color:#F6F6F4;"> 数据2:</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">    break</span></span>
<span class="line"><span style="color:#F286C4;">  default</span><span style="color:#F6F6F4;">:</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 代码块</span></span>
<span class="line"><span style="color:#F286C4;">    break</span><span style="color:#7B7F8B;"> // 可以省略</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h3><p>重复运行一段代码</p><blockquote><p>条件永远满足则为死循环，无法退出</p></blockquote><h4 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span><code>for</code> 循环</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">// 初始化表达式的声明提升</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (初始化表达式; 条件表达式; 迭代表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div>`,253)),l(n,{id:"mermaid-1845",code:"eJxLL0osyFDwCeIK1tB4uqfh6fLup/tWPe9br6mpoKtrp+AY/bRjLkiwZ9qLhSte7Nv3dE9/LJcjWM6p+tnchU92b4NL1HI5ASVKikpTQdLO0U92L36+oPHp3OmxXM5gHS7RL/avBYoiGeUCMQqsMy0xpxis1VVD42VDw9P2XTC3cAEAvZtPTA=="}),s[1]||(s[1]=a(`<h4 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span><code>while</code> 循环</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (条件表达式) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div>`,2)),l(n,{id:"mermaid-1850",code:"eJxLL0osyFDwCeIK1tB4uqfh6fLup/tWPe9br6mpoKtrp+BY/Wzuwie7t71YuOLFvn1P9/TXcjkCJUqKSlNB0k7RT3Yvfr6g8enc6bFcThAdYAVpiTnFYBWuGhovGxqetu+CGcsFAMB4MsA="}),s[2]||(s[2]=a(`<h4 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环"><span><code>do-while</code> 循环</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">do</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (条件表达式)</span></span></code></pre></div><p>先运行一次循环体再进行条件判断</p>`,3)),l(n,{id:"mermaid-1858",code:"eJxLL0osyFDwCeIK1tB4uqfh6fJuTU0FXV07BafoJ7sXP1/Q+HTu9FguJ7CQY/WzuQuf7N72YuGKF/v2Pd3TX8vlCJQoKSpNBesA89ISc4rBXFcNjZcNDU/bd2lqcgEAuNQp3w=="}),s[3]||(s[3]=a(`<h4 id="for-in-循环" tabindex="-1"><a class="header-anchor" href="#for-in-循环"><span><code>for in</code> 循环</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> prop </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> 对象) {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 代码块</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><p>取出对象所有属性名，每次循环将其中一个<strong>属性名</strong>赋值给 <code>prop</code>，然后执行代码块</p><div class="hint-container important"><p class="hint-container-title"><code>in</code> 关键字</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">属性名 </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> 对象</span></span></code></pre></div><p>判断对象是否有指定<strong>属性名（<em>字符串</em>）</strong>，返回 <code>true</code> / <code>false</code></p></div><h4 id="循环控制语句" tabindex="-1"><a class="header-anchor" href="#循环控制语句"><span>循环控制语句</span></a></h4><ol><li><code>break</code> 跳出当前循环结构</li><li><code>continue</code> 跳过本次循环，进入下一次循环</li></ol><blockquote><p>多层循环分开分析</p></blockquote><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p>用于存放多个数据</p><h3 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组"><span>创建数组</span></a></h3><ol><li><code>new Array(长度)</code> 创建指定长度的空数组 <ul><li>长度：数组的数据总数，非负整数</li></ul></li><li><code>new Array(元素1, 元素2, ...)</code> 创建数组并初始化元素</li><li><code>[元素1, 元素2, ...]</code> 创建数组并初始化每一项的值</li></ol><h3 id="数组的本质" tabindex="-1"><a class="header-anchor" href="#数组的本质"><span>数组的本质</span></a></h3><p>数组的本质是一个<strong>对象</strong></p><ul><li>数字字符串属性名：数组的索引（<em>下标</em>），从 <code>0</code> 开始</li><li><code>length</code> 属性：数组的长度；自动更新，值为<strong>最大下标加一</strong></li></ul><details class="hint-container details"><summary>📍 数组示例</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">arr[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 10</span></span>
<span class="line"><span style="color:#F6F6F4;">arr[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 5</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">], arr[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">]) </span><span style="color:#7B7F8B;">// 5, 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">arr.abc </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.[</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [ , , ,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">] </span><span style="color:#7B7F8B;">// 属性不存在</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">] </span><span style="color:#7B7F8B;">// 属性存在</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [ , , , , ] </span><span style="color:#7B7F8B;">// 长度为 3</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr5 </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;"> new</span><span style="color:#62E884;"> Array</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 稀疏数组</span></span></code></pre></div></details><div class="hint-container important"><p class="hint-container-title">重要</p><p>通常情况下下标是连续；连续下标的取值范围为 <code>0</code> ~ <code>length - 1</code>；<strong>下标不连续的数组叫做稀疏数组</strong></p><p>如果给 <code>length</code> 属性赋值，会自动调整数组的长度；如果赋值小于当前长度，会截断数组，非数字属性会保留</p></div><h3 id="数组的常用操作" tabindex="-1"><a class="header-anchor" href="#数组的常用操作"><span>数组的常用操作</span></a></h3><h4 id="添加-删除元素" tabindex="-1"><a class="header-anchor" href="#添加-删除元素"><span>添加 / 删除元素</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">// 向指定下标添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">arr[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 向末尾添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">arr[arr.length] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 2</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 向开头添加元素；会导致数组下标向后移动</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">unshift</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">unshift</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">// 删除属性；不会导致数组其他属性变化，会产生稀松数组</span></span>
<span class="line"><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;"> arr[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 删除最后一项</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">pop</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// 返回被删除的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 删除第一项</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">shift</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// 返回被删除的元素</span></span></code></pre></div><h4 id="splice" tabindex="-1"><a class="header-anchor" href="#splice"><span>splice</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">splice</span><span style="color:#F6F6F4;">(起始下标, 删除个数, 插入元素1, 插入元素2, </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><p>从指定下标位置删除多个元素，然后插入数据：</p><ul><li><strong>返回一个新数组，包含被删除的元素；未删除任何元素则返回 <code>undefined</code></strong></li><li>如果下标超过下标范围，则按左右边界处理</li><li>删除个数超过数组长度，则全部删除</li></ul><h4 id="slice-数组切片" tabindex="-1"><a class="header-anchor" href="#slice-数组切片"><span>slice 数组切片</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">(起始下标, 结束下标)</span></span></code></pre></div><p>取出起始下标到结束下标（<em>不包含</em>）的元素，并<strong>返回一个新数组</strong>；不会改变原数组</p><ul><li>下标为负数，则从末尾开始计算</li><li>不指定结束下标，则默认取到数组末尾</li></ul><h4 id="数组查找" tabindex="-1"><a class="header-anchor" href="#数组查找"><span>数组查找</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(元素)</span></span></code></pre></div><p>返回数组中指定元素的第一个下标（<em>严格相等</em>）；如果不存在，则返回 <code>-1</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">lastIndexOf</span><span style="color:#F6F6F4;">(元素)</span></span></code></pre></div><p>返回数组中指定元素的最后一个下标（<em>严格相等</em>）；如果不存在，则返回 <code>-1</code></p><h4 id="fill-数组填充" tabindex="-1"><a class="header-anchor" href="#fill-数组填充"><span>fill 数组填充</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">fill</span><span style="color:#F6F6F4;">(元素)</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">fill</span><span style="color:#F6F6F4;">(元素, 起始下标, 结束下标)</span></span></code></pre></div><p>将数组的指定下标返回填充（<em>替换</em>）为指定元素：</p><ul><li>不指定下标，则视为全部填充</li><li>不指定结束下标，则默认到数组末尾</li></ul><h4 id="清空数组" tabindex="-1"><a class="header-anchor" href="#清空数组"><span>清空数组</span></a></h4><ol><li><code>arr.length = 0</code></li><li><code>arr.splice(0, arr.length)</code></li></ol><h4 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h4><p>将数字每一项转换为字符串，然后用指定字符拼接</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">分隔符</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span></code></pre></div><h4 id="数组拼接" tabindex="-1"><a class="header-anchor" href="#数组拼接"><span>数组拼接</span></a></h4><p>向数组末尾拼接另一个数组：</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr1.</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(arr2) </span><span style="color:#7B7F8B;">// 返回一个新数组；不会改变原数组</span></span></code></pre></div><h3 id="数组的遍历" tabindex="-1"><a class="header-anchor" href="#数组的遍历"><span>数组的遍历</span></a></h3><p>遍历：输出数组每一项</p><h4 id="for-in-遍历" tabindex="-1"><a class="header-anchor" href="#for-in-遍历"><span><code>for in</code> 遍历</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> arr) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr[i])</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>与普通 <code>for</code> 循环区别于遍历稀松数组时不会遍历到空项</p></div><h3 id="数组的克隆" tabindex="-1"><a class="header-anchor" href="#数组的克隆"><span>数组的克隆</span></a></h3><p>克隆：产生一个全新的对象，包含相同的属性和值</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr1.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// 或 var arr2 = arr1.slice(0)</span></span></code></pre></div><h3 id="二维数组" tabindex="-1"><a class="header-anchor" href="#二维数组"><span>二维数组</span></a></h3><p>数组的每一项都是一个数组</p><details class="hint-container details"><summary>📍 输出二位数组所有项</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr[i].length; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr[i][j])</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div></details><h3 id="数组的应用" tabindex="-1"><a class="header-anchor" href="#数组的应用"><span>数组的应用</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr1 </span><span style="color:#7B7F8B;">// 数组的本质是对象，对象存放的是地址</span></span>
<span class="line"><span style="color:#F6F6F4;">arr2[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 10</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr1) </span><span style="color:#7B7F8B;">// [10, 2, 3]</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr2) </span><span style="color:#7B7F8B;">// [10, 2, 3]</span></span></code></pre></div>`,58))])}const y=o(r,[["render",t]]),E=JSON.parse(`{"path":"/docs/learning/frontend/JavaScript.html","title":"JavaScript","lang":"zh-CN","frontmatter":{"description":"JavaScript JavaScript 起源 网景公司（Netscape Communication Corporation）于 1994 年推出了第一款商用浏览器：网景（Netscape Navigator）。 1995 年，网景公司决定在浏览器中加入一门编程语言，用于实现用户交互效果，提高用户体验。 网景公司聘请 Brendan Eich 开发...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoSheBRO\\"}]}"],["meta",{"property":"og:url","content":"https://XiaoSheBRO.github.io/docs/learning/frontend/JavaScript.html"}],["meta",{"property":"og:site_name","content":"Shaw's Book"}],["meta",{"property":"og:title","content":"JavaScript"}],["meta",{"property":"og:description","content":"JavaScript JavaScript 起源 网景公司（Netscape Communication Corporation）于 1994 年推出了第一款商用浏览器：网景（Netscape Navigator）。 1995 年，网景公司决定在浏览器中加入一门编程语言，用于实现用户交互效果，提高用户体验。 网景公司聘请 Brendan Eich 开发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":39.3,"words":7859},"filePathRelative":"docs/learning/frontend/JavaScript.md","autoDesc":true,"excerpt":"\\n<h2>JavaScript 起源</h2>\\n<p>网景公司（Netscape Communication Corporation）于 1994 年推出了第一款商用浏览器：网景（Netscape Navigator）。<br>\\n1995 年，网景公司决定在浏览器中加入一门编程语言，用于实现用户交互效果，提高用户体验。<br>\\n网景公司聘请 <strong>Brendan Eich</strong> 开发这门语言。10 天后， LiveScript 语言诞生。后来为了商业考虑，更名为 JavaScript（<em>JS</em>）。</p>\\n<blockquote>\\n<p>Java 与 JavaScript 的关系：周杰 ~ 周杰伦；葡萄 ~ 葡萄牙。</p>\\n</blockquote>"}`);export{y as comp,E as data};
