import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as l,o as p}from"./app-BIBsZUwS.js";const o="/assets/1659278793981-Dos0kzf5.png",e="/assets/20200204152241-D8PgxI6M.png",t="/assets/1659338915119-DtO54jdL.png",c={};function r(F,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="vue-基础教程" tabindex="-1"><a class="header-anchor" href="#vue-基础教程"><span>VUE 基础教程</span></a></h1><h2 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h2><p>以 vue 为后缀的文件是 vue 的单文件组件<br> 可以把组件理解成一个，可以自定义的，有更强大功能的标签<br> 链接：html 的 a 标签<br> 登录：.vue 组件，登录<br> 轮播图·.vue 组件，轮播图<br> 这样用组件拆分的方式开发项目，思路清晰，简洁高效，而且还可以复用相同的组件</p><h3 id="引入方式" tabindex="-1"><a class="header-anchor" href="#引入方式"><span>引入方式</span></a></h3><ul><li>直接引入 vue.js 文件 <ul><li>Vue2.x cdn:<code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.7.8/dist/vue.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>基于 Node 环境创建 Vue 项目（使用 vue/cli 创建初始化一个 Vue 项目）</li></ul><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>hello world</span></a></h3><p>创建 Vue 实例：</p><div class="language-html" data-highlighter="shiki" data-ext="html" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">  new</span><span style="color:#62E884;"> Vue</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">    el</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">...</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#7B7F8B;">// 绑定网页元素(包含所有子集)，相当于获取DOM节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    data</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">      // 绑定数据</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    methods</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">      // 绑定函数</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre></div><p>绑定文本：<code>{{文本表达式}}</code> (<em>可写 js 表达式</em>)<br> 绑定属性：<code>v-bind:属性=&quot;...&quot;</code> <strong>简写</strong>：<code>:属性=&quot;...&quot;</code><br> 绑定事件：<code>v-on:事件类型=&quot;方法&quot;</code> <strong>简写</strong>：<code>@事件类型=&quot;方法&quot;</code></p><blockquote><p><code>事件类型.stop</code> 阻止事件冒泡</p></blockquote><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h2><p>安装 vue 命令行工具： <code>npm install -g @vue/cli</code><br> 创建项目：<code>vue create 项目名</code><br> 启动项目：<code>npm run serve</code></p><h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h2><p>《*.vue》：vue 的单文件组件</p><blockquote><p>组件化开发：用组件拆分的方式开发项目，思路清晰，简洁高效，还可以复用相的组件，降低了功能的耦合，但是增加了数据传输的难度</p></blockquote><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">// main.js</span></span>
<span class="line"><span style="color:#7B7F8B;">/* import 引入模块 */</span></span>
<span class="line"><span style="color:#F6F6F4;">Vue.config.productionTip </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> false</span></span>
<span class="line"><span style="color:#7B7F8B;">//配置开发选项，false:友好的错误提示 true:无错误提示</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> Vue</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#62E884;">  render</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">h</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#62E884;"> h</span><span style="color:#F6F6F4;">(App) </span><span style="color:#7B7F8B;">//箭头函数，传入组件并渲染</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">$mount</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">#app</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">//挂载到#app</span></span></code></pre></div><div class="language-vue" data-highlighter="shiki" data-ext="vue" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">/* App.vue */</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">template</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">  &lt;!-- 网页模板 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">div</span><span style="color:#62E884;font-style:italic;"> id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">    &lt;!-- 最外层只能暴露一个标签 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">template</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">// js代码</span></span>
<span class="line"><span style="color:#7B7F8B;">/* import 引入模块 */</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F286C4;"> default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 暴露接口</span></span>
<span class="line"><span style="color:#F6F6F4;">  components</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 注册组件</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">App</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#62E884;">  data</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#7B7F8B;">    // node下 data 为函数形式</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#F6F6F4;"> {}</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  methods</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {}</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">style</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">/* css代码 */</span></span>
<span class="line"><span style="color:#62E884;font-style:italic;">#app</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">style</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre></div><blockquote><p><code>&lt;style scoped&gt;&lt;/style&gt;</code> scoped-只有当前组件能用</p></blockquote><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h2><h3 id="元素可见性" tabindex="-1"><a class="header-anchor" href="#元素可见性"><span>元素可见性</span></a></h3><p><code>v-if=&quot;false&quot;</code> 不渲染 DOM<br><code>v-show=&quot;false&quot;</code> 渲染 DOM，将元素隐藏</p><p>根据列表项动态生成：<br><code>v-for=&quot;(元素, 序号) of list&quot; :key=&quot;序号&quot;</code><br> 定义后可直接调用该列表属性</p><h2 id="组件嵌套" tabindex="-1"><a class="header-anchor" href="#组件嵌套"><span>组件嵌套</span></a></h2><p>组件命名规则：首字母大写，驼峰，不要与 html 标签重名<br> 网页内引入标签时不区分大小写，若为驼峰命名还可以在单词中间加<code>-</code></p><h3 id="组件传值" tabindex="-1"><a class="header-anchor" href="#组件传值"><span>组件传值</span></a></h3><p><strong>父级向子级传递数据</strong>：App.vue =&gt; *.vue (<em>使用属性传递</em>)</p><div class="language-html" data-highlighter="shiki" data-ext="html" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- 父级 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">child-app</span><span style="color:#62E884;font-style:italic;"> :msg</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">message</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">child-app</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!-- 将数据绑定到子级 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#62E884;">  data</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      message</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">child</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#7B7F8B;">// 在data中定义数据</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#7B7F8B;">  /* 子级 */</span></span>
<span class="line"><span style="color:#F286C4;">  export</span><span style="color:#F286C4;"> default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    props</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">msg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">], </span><span style="color:#7B7F8B;">// 继承数据</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre></div><p><strong>子级向父级传递数据</strong>：*.vue =&gt; App.vue (<em>自定义事件</em>)<br><code>this.$emit(&quot;事件名&quot;, 待传输数据);</code></p><div class="language-html" data-highlighter="shiki" data-ext="html" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">  &lt;!--</span><span style="color:#F6F6F4;"> 子级 </span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#62E884;">    data</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">      return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        myData</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;</span><span style="color:#E7EE98;">hi, i&#39;m child</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      };</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    methods: {</span></span>
<span class="line"><span style="color:#62E884;">      sendData</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#BF9EEE;font-style:italic;">        this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">$emit</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">event</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.myData);</span></span>
<span class="line"><span style="color:#F6F6F4;">      },</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">child-app</span><span style="color:#62E884;font-style:italic;"> @event</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getData</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">child-app</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">  &lt;!--</span><span style="color:#F6F6F4;"> 父级 </span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#62E884;">    data</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F286C4;">      return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        childData</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    methods: {</span></span>
<span class="line"><span style="color:#62E884;">      getData</span><span style="color:#F6F6F4;">(Data) {</span></span>
<span class="line"><span style="color:#BF9EEE;font-style:italic;">        this</span><span style="color:#F6F6F4;">.childData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Data;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre></div><p><strong>非父子级数据共享</strong>：《store.js》</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F286C4;"> default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  state</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    message</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">hello vue</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;"> // 共享的数据</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#62E884;">  setStateMessage</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#BF9EEE;font-style:italic;">    this</span><span style="color:#F6F6F4;">.state.message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str </span><span style="color:#7B7F8B;">// set方法</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h2 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性"><span>计算属性</span></a></h2><p>多个值改变，影响一个结果时使用</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">computed: {</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 进行？纯计算？的属性</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h2 id="侦听器" tabindex="-1"><a class="header-anchor" href="#侦听器"><span>侦听器</span></a></h2><p>一个值变化影响多个值时，使用侦听器</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">watch:{</span></span>
<span class="line"><span style="color:#62E884;">  x</span><span style="color:#F6F6F4;">(val){</span></span>
<span class="line"><span style="color:#7B7F8B;">    // 绑定data中的值，当x的值发生变化时执行的函数</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h2 id="生命周期钩子" tabindex="-1"><a class="header-anchor" href="#生命周期钩子"><span>生命周期钩子</span></a></h2><blockquote><p>不能使用箭头函数<br> 为了避免杂乱，可以先在 methods 里写好方法，然后再在生命周期函数里调用</p></blockquote><p>在页面加载时主动执行程序<br><img src="`+o+'" alt="1659278793981" loading="lazy"><br><img src="'+e+`" alt="生命周期" loading="lazy"></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#62E884;">created</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 一般用于初始化数据</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 加载 html 模板</span></span>
<span class="line"><span style="color:#62E884;">mounted</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#7B7F8B;">  // 一般用于操作 html 元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h2 id="插槽" tabindex="-1"><a class="header-anchor" href="#插槽"><span>插槽</span></a></h2><p>实现子级组件标签内自定义<br> 让我们更灵活地使用自定义组件，增强组件的扩展性，组件库基本基于插槽</p><ul><li>子级自定义组件：<code>&lt;slot&gt;待自定义部分&lt;/slot&gt;</code></li><li>父级 App.vue：<code>&lt;...&gt;自定义文本&lt;/...&gt;</code></li></ul><p><strong>具名插槽</strong>：</p><ul><li>父级：<code>&lt;app&gt;&lt;template v-slot:1&gt;&lt;/template&gt;&lt;/app&gt;</code></li><li>子级：<code>&lt;slot name=&quot;1&quot;&gt;&lt;/slot&gt;</code></li></ul><h2 id="获取真实-dom" tabindex="-1"><a class="header-anchor" href="#获取真实-dom"><span>获取真实 DOM</span></a></h2><p><code>window.getComputedStyle(dom节点).样式属性</code></p><ul><li>用原生 js 获取 dom(<em>注意获取 dom 的时间节点</em>)<br> 属性：<code>ref=&quot;*&quot;</code> 其 dom 节点为：<code>this.$refs.*</code></li></ul><blockquote><p>Vue 应用开发的过程中，大部分情况是不需要获取真实 DOM 的<br> Vue 中的数据变化，并不是直接改变 DOM，而是通过改变虚拟 DOM，并计算变更差异，进而修改 DOM 中有变化的内容，提升性能<br><img src="`+t+`" alt="1659338915119" loading="lazy"></p></blockquote><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器"><span>过滤器</span></a></h2><p>通过固定算法重新组织数据</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span><span style="color:#F286C4;">{</span><span style="color:#F6F6F4;"> { str | split } </span><span style="color:#F286C4;">}</span><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">filters:{</span></span>
<span class="line"><span style="color:#62E884;">  split</span><span style="color:#F6F6F4;">(str){</span></span>
<span class="line"><span style="color:#F286C4;">    return</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">split</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre></div><h2 id="表单" tabindex="-1"><a class="header-anchor" href="#表单"><span>表单</span></a></h2><p><code>@submit.prevent</code> 取消表单提交默认刷新页面</p><h3 id="数据双向绑定" tabindex="-1"><a class="header-anchor" href="#数据双向绑定"><span>数据双向绑定</span></a></h3><p><code>v-model=&quot;数据名&quot;</code></p><h4 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h4><ul><li><code>.number</code> 自动转为 Number 类型(<em>如果原值的转换结果为 NaN 则返回原值</em>)</li><li><code>.trim</code> 自动过滤用户输入的首尾空格</li><li><code>.lazy</code> 将 v-model 在 input 事件中同步输入框的数据转变为在 change 事件中同步数据</li></ul><h3 id="数据交互" tabindex="-1"><a class="header-anchor" href="#数据交互"><span>数据交互</span></a></h3><p>http 协议：前端（浏览器）发送请求，服务器给予响应。<br> 请求方法：get（查询）、post（添加）、put（修改）、delete（删除）<br> ajax：不刷新页面与后台交互数据。<br> axios：封装好的 aja× 模块。</p><h3 id="路由" tabindex="-1"><a class="header-anchor" href="#路由"><span>路由</span></a></h3><p><code>&lt;router-link to=&quot;url&quot;&gt;&lt;router-link&gt;</code><br><code>&lt;router-view/&gt;</code></p><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createRouter, createWebHistory } </span><span style="color:#F286C4;">from</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">vue-router</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> HomeView </span><span style="color:#F286C4;">from</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">../views/HomeView.vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> router </span><span style="color:#F286C4;">=</span><span style="color:#62E884;"> createRouter</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">  history</span><span style="color:#F286C4;">:</span><span style="color:#62E884;"> createWebHistory</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;">.meta.env.</span><span style="color:#BF9EEE;">BASE_URL</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">  routes</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">    {</span></span>
<span class="line"><span style="color:#F6F6F4;">      path</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">home</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      component</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> HomeView</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    {</span></span>
<span class="line"><span style="color:#F6F6F4;">      path</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">/about</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;"> &#39;</span><span style="color:#E7EE98;">about</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#7B7F8B;">      // lazy-loaded</span></span>
<span class="line"><span style="color:#62E884;">      component</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F286C4;"> import</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../views/AboutView.vue</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  ]</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F286C4;"> default</span><span style="color:#F6F6F4;"> router</span></span></code></pre></div><h4 id="路由传参" tabindex="-1"><a class="header-anchor" href="#路由传参"><span>路由传参</span></a></h4><p><code>v-for</code><br><code>/url/:param</code></p><h3 id="本地存储" tabindex="-1"><a class="header-anchor" href="#本地存储"><span>本地存储</span></a></h3><h3 id="导航守卫" tabindex="-1"><a class="header-anchor" href="#导航守卫"><span>导航守卫</span></a></h3><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code><span class="line"><span style="color:#F6F6F4;">router.</span><span style="color:#62E884;">beforeEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {})‘</span></span>
<span class="line"><span style="color:#7B7F8B;">// 去向</span></span>
<span class="line"><span style="color:#7B7F8B;">// 来源</span></span>
<span class="line"><span style="color:#7B7F8B;">// 跳转操作</span></span></code></pre></div><p>option<br> setup</p>`,70)]))}const d=a(c,[["render",r]]),h=JSON.parse(`{"path":"/docs/learning/frontend/Vue2.x.html","title":"VUE 基础教程","lang":"zh-CN","frontmatter":{"description":"VUE 基础教程 Vue 以 vue 为后缀的文件是 vue 的单文件组件 可以把组件理解成一个，可以自定义的，有更强大功能的标签 链接：html 的 a 标签 登录：.vue 组件，登录 轮播图·.vue 组件，轮播图 这样用组件拆分的方式开发项目，思路清晰，简洁高效，而且还可以复用相同的组件 引入方式 直接引入 vue.js 文件 Vue2.x c...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VUE 基础教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoSheBRO\\"}]}"],["meta",{"property":"og:url","content":"https://XiaoSheBRO.github.io/docs/learning/frontend/Vue2.x.html"}],["meta",{"property":"og:site_name","content":"Shaw's Book"}],["meta",{"property":"og:title","content":"VUE 基础教程"}],["meta",{"property":"og:description","content":"VUE 基础教程 Vue 以 vue 为后缀的文件是 vue 的单文件组件 可以把组件理解成一个，可以自定义的，有更强大功能的标签 链接：html 的 a 标签 登录：.vue 组件，登录 轮播图·.vue 组件，轮播图 这样用组件拆分的方式开发项目，思路清晰，简洁高效，而且还可以复用相同的组件 引入方式 直接引入 vue.js 文件 Vue2.x c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":7.05,"words":1409},"filePathRelative":"docs/learning/frontend/Vue2.x.md","autoDesc":true,"excerpt":"\\n<h2>Vue</h2>\\n<p>以 vue 为后缀的文件是 vue 的单文件组件<br>\\n可以把组件理解成一个，可以自定义的，有更强大功能的标签<br>\\n链接：html 的 a 标签<br>\\n登录：.vue 组件，登录<br>\\n轮播图·.vue 组件，轮播图<br>\\n这样用组件拆分的方式开发项目，思路清晰，简洁高效，而且还可以复用相同的组件</p>\\n<h3>引入方式</h3>\\n<ul>\\n<li>直接引入 vue.js 文件\\n<ul>\\n<li>Vue2.x cdn:<code>&lt;script src=\\"https://cdn.jsdelivr.net/npm/vue@2.7.8/dist/vue.js\\"&gt;&lt;/script&gt;</code></li>\\n</ul>\\n</li>\\n<li>基于 Node 环境创建 Vue 项目（使用 vue/cli 创建初始化一个 Vue 项目）</li>\\n</ul>"}`);export{d as comp,h as data};
