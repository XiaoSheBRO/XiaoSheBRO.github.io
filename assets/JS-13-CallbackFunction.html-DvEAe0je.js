import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,f as a,e as o,o as e}from"./app-Bw-jT3D9.js";const t={};function F(r,s){return e(),p("div",null,[s[0]||(s[0]=n("h1",{id:"回调函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#回调函数"},[n("span",null,"回调函数")])],-1)),a(" #region demo "),s[1]||(s[1]=o(`<details class="hint-container details"><summary>📝 练习：回调函数</summary><div class="language-js" data-highlighter="shiki" data-ext="js" style="background-color:#282A36;color:#f6f6f4;"><pre class="shiki dracula-soft vp-code"><code class="language-js"><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 自定义数组排序</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#97E1F1;font-style:italic;"> {Array}</span><span style="color:#FFB86C;font-style:italic;"> arr</span><span style="color:#7B7F8B;"> 数组</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#97E1F1;font-style:italic;"> {Function}</span><span style="color:#FFB86C;font-style:italic;"> compare</span><span style="color:#7B7F8B;"> 比较函数，接收两个参数，返回负数 / 0 / 正数</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@returns</span><span style="color:#97E1F1;font-style:italic;"> {Array}</span><span style="color:#7B7F8B;"> 排序后的数组</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#62E884;"> arrSort</span><span style="color:#F286C4;"> =</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">compareFn</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">  if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">compareFn) {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /* 默认比较函数 */</span></span>
<span class="line"><span style="color:#62E884;">    compareFn</span><span style="color:#F286C4;"> =</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">      if</span><span style="color:#F6F6F4;"> (a </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> b) {</span></span>
<span class="line"><span style="color:#F286C4;">        return</span><span style="color:#F286C4;"> -</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">      } </span><span style="color:#F286C4;">else</span><span style="color:#F286C4;"> if</span><span style="color:#F6F6F4;"> (a </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> b) {</span></span>
<span class="line"><span style="color:#F286C4;">        return</span><span style="color:#BF9EEE;"> 1</span></span>
<span class="line"><span style="color:#F6F6F4;">      } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F286C4;">        return</span><span style="color:#BF9EEE;"> 0</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F286C4;">  for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">    for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> i; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">      if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">compareFn</span><span style="color:#F6F6F4;">(arr[j], arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">]) </span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;"> 0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F286C4;">        let</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j]</span></span>
<span class="line"><span style="color:#F6F6F4;">        arr[j] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">        arr[j </span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;"> 1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#62E884;"> compare</span><span style="color:#F286C4;"> =</span><span style="color:#F286C4;"> function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {}</span></span></code></pre></div></details>`,1)),a(" #endregion demo ")])}const i=l(t,[["render",F]]),C=JSON.parse(`{"path":"/docs/demo/JS-13-CallbackFunction.html","title":"回调函数","lang":"zh-CN","frontmatter":{"description":"回调函数 📝 练习：回调函数","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回调函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoSheBRO\\"}]}"],["meta",{"property":"og:url","content":"https://XiaoSheBRO.github.io/docs/demo/JS-13-CallbackFunction.html"}],["meta",{"property":"og:site_name","content":"Shaw's Book"}],["meta",{"property":"og:title","content":"回调函数"}],["meta",{"property":"og:description","content":"回调函数 📝 练习：回调函数"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}]]},"git":{},"readingTime":{"minutes":0.67,"words":134},"filePathRelative":"docs/_demo/JS-13-CallbackFunction.md","autoDesc":true}`);export{i as comp,C as data};
